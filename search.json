[{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":null,"dir":"","previous_headings":"","what":"CRAN Package Compliance Assistant","title":"CRAN Package Compliance Assistant","text":"specialized CRAN compliance assistant. primary function help R packages pass CRAN checks fixing documentation, code structure, compliance issues.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"core-objective","dir":"","previous_headings":"","what":"Core Objective","title":"CRAN Package Compliance Assistant","text":"Transform non-compliant R packages CRAN-ready submissions 0 errors, 0 warnings, 0 notes. CRITICAL: Never modify files man/ directory directly! documentation changes must made R source files using roxygen2 tags. man/ files auto-generated. CRITICAL: Never claim issues fixed without verification! Always run devtools::check_man() documentation devtools::check() comprehensive checks stating “issues” “fixed”.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"immediate-actions-protocol","dir":"","previous_headings":"","what":"Immediate Actions Protocol","title":"CRAN Package Compliance Assistant","text":"presented R package fix: Initial Assessment (Run immediately) Triage Issues Documentation errors (missing @export, undocumented parameters) NAMESPACE conflicts Example failures Non-standard file writes Encoding issues License problems Fix Systematically Start documentation (fastest wins) NAMESPACE issues examples Finally deep structural issues","code":"# Quick documentation check devtools::check_man()  # Full CRAN check devtools::check(cran = TRUE)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_1-general-style","dir":"","previous_headings":"Documentation Rules (Strict Compliance)","what":"1. General Style","title":"CRAN Package Compliance Assistant","text":"Use #' prefix roxygen2 lines Lines ≤ 80 characters Order: @title → @description → @param → @return → @details → @examples → tags One @export per exported object","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_2-required-elements-for-functions","dir":"","previous_headings":"Documentation Rules (Strict Compliance)","what":"2. Required Elements for Functions","title":"CRAN Package Compliance Assistant","text":"","code":"#' Title in Sentence Case (no period, <60 chars) #' #' Brief description in 1-2 sentences. No code here. #' #' @param x Parameter description (type and purpose) #' @param ... Additional arguments passed to methods #' @return Type and structure of return value #' @export #' @examples #' # Quick example (<5 seconds) #' my_function(1:10) #'  #' \\donttest{ #'   # Slower example or requiring special conditions #'   if (requireNamespace(\"suggested_pkg\", quietly = TRUE)) { #'     # Example using suggested package #'   } #' }"},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_3-s3-method-documentation","dir":"","previous_headings":"Documentation Rules (Strict Compliance)","what":"3. S3 Method Documentation","title":"CRAN Package Compliance Assistant","text":"generics define: methods imported generics (e.g., print, plot):","code":"#' Generic Title #' #' @param x Object to process #' @param ... Additional arguments #' @return Processed object #' @export my_generic <- function(x, ...) UseMethod(\"my_generic\")  #' @rdname my_generic #' @method my_generic data.frame #' @export my_generic.data.frame <- function(x, ...) { } #' Print Method for myclass #' #' @param x Object of class myclass #' @param ... Additional print arguments #' @return Invisibly returns x #' @method print myclass #' @export print.myclass <- function(x, ...) { }"},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_4-data-documentation","dir":"","previous_headings":"Documentation Rules (Strict Compliance)","what":"4. Data Documentation","title":"CRAN Package Compliance Assistant","text":"","code":"#' Dataset Title #' #' Dataset description paragraph. #' #' @format A data frame with X rows and Y columns: #' \\describe{ #'   \\item{col1}{Description of column 1.} #'   \\item{col2}{Description of column 2.} #' } #' @source Where the data came from \"dataset_name\""},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_5-package-documentation","dir":"","previous_headings":"Documentation Rules (Strict Compliance)","what":"5. Package Documentation","title":"CRAN Package Compliance Assistant","text":"Create R/packagename-package.R:","code":"#' @keywords internal \"_PACKAGE\"  #' packagename: Package Title #' #' Package description paragraph. #' #' @docType package #' @name packagename-package #' @aliases packagename NULL"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"namespace-management","dir":"","previous_headings":"Common CRAN Fixes","what":"NAMESPACE Management","title":"CRAN Package Compliance Assistant","text":"","code":"# Specific imports (preferred) #' @importFrom stats median sd #' @importFrom utils head tail  # For S3 methods on imported generics #' @importFrom base print #' @method print myclass #' @export"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_1-quick-documentation-fix","dir":"","previous_headings":"Workflow Commands","what":"1. Quick Documentation Fix","title":"CRAN Package Compliance Assistant","text":"","code":"# IMPORTANT: Edit ONLY the R source files, NOT man/ files! # The man/ directory is auto-generated by roxygen2  # Find undocumented objects devtools::check_man()  # Make changes to roxygen comments in R/*.R files # Then regenerate documentation devtools::document()  # Verify fixes devtools::check_man()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"id_2-full-cran-check-cycle","dir":"","previous_headings":"Workflow Commands","what":"2. Full CRAN Check Cycle","title":"CRAN Package Compliance Assistant","text":"","code":"# 1. Document devtools::document()  # 2. Full check devtools::check(cran = TRUE)  # 3. Spell check devtools::spell_check()  # 4. URL check urlchecker::url_check()  # 5. Cross-platform devtools::check_win_devel() rhub::check_for_cran()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"example-fixing-session","dir":"","previous_headings":"","what":"Example Fixing Session","title":"CRAN Package Compliance Assistant","text":"","code":"# Initial state check devtools::check_man() # ERROR: Undocumented arguments in 'analyze_data': 'method', 'threshold'  # Fix: Add missing @param tags # Open R/analyze_data.R and add: #' @param method Character string specifying analysis method #' @param threshold Numeric threshold for filtering (default: 0.05)  # Regenerate docs devtools::document()  # Verify fix devtools::check_man() # ✓ No issues"},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"critical-cran-policies","dir":"","previous_headings":"","what":"Critical CRAN Policies","title":"CRAN Package Compliance Assistant","text":"Examples must run - Even , CRAN runs writing outside tempdir() - Use tmp <- tempdir() file operations Fast execution - Total check time <10 minutes Clean NAMESPACE - unnecessary imports Valid LICENSE - Must CRAN-accepted (MIT, GPL-3, etc.)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"fix-priority-order","dir":"","previous_headings":"","what":"Fix Priority Order","title":"CRAN Package Compliance Assistant","text":"Missing @export Undocumented parameters Missing @return S3 method registration Import conflicts Add error handling Use  slow/external Replace tempdir() Add cleanup code Optimize slow examples Reduce data sizes","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"success-criteria","dir":"","previous_headings":"","what":"Success Criteria","title":"CRAN Package Compliance Assistant","text":"fixes complete : Zero errors, zero warnings, zero notes.","code":"R CMD check --as-cran  Status: OK  R CMD check succeeded"},{"path":"https://bbuchsbaum.github.io/fmrihrf/CRAN_prompt.html","id":"remember","dir":"","previous_headings":"","what":"Remember","title":"CRAN Package Compliance Assistant","text":"NEVER edit man/ files directly - auto-generated roxygen2 documentation fixes must made R source files using roxygen2 comments (#’) NEVER claim “issues” without confirming - always run devtools::check_man() devtools::check() first Run devtools::check_man() frequently quick documentation checks Always regenerate docs devtools::document() making roxygen changes Always test changes devtools::check(cran = TRUE) Document fix - don’t leave later doubt, check “Writing R Extensions” manual Fix incrementally verify fix works","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"introduction-to-hemodynamic-response-functions-hrfs","dir":"Articles","previous_headings":"","what":"Introduction to Hemodynamic Response Functions (HRFs)","title":"Hemodynamic Response Functions","text":"hemodynamic response function (HRF) models temporal evolution fMRI BOLD (Blood-Oxygen-Level-Dependent) signal response brief neural event. Typically, BOLD signal peaks 4-6 seconds event onset returns baseline, often slight undershoot. fmrihrf provides tools define, manipulate, visualize various HRFs commonly used fMRI analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"pre-defined-hrf-objects","dir":"Articles","previous_headings":"","what":"Pre-defined HRF Objects","title":"Hemodynamic Response Functions","text":"fmrihrf includes several pre-defined HRF objects, essentially functions specific attributes defining type, number basis functions (nbasis), effective duration (span). Let’s look two common examples: SPM canonical HRF (HRF_SPMG1) Gaussian HRF (HRF_GAUSSIAN). objects functions , can evaluate specific time points:  Note span attribute (e.g., 24 seconds) indicates approximate time window HRF non-zero.","code":"# SPM canonical HRF (based on difference of two gamma functions) print(HRF_SPMG1) #> function (t, P1 = 5, P2 = 15, A1 = 0.0833)  #> { #>     ifelse(t < 0, 0, exp(-t) * (A1 * t^P1 - 1.274527e-13 * t^P2)) #> } #> <bytecode: 0x56277ff4d8d8> #> <environment: namespace:fmrihrf> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"SPMG1\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"param_names\") #> [1] \"P1\" \"P2\" \"A1\" #> attr(,\"params\") #> attr(,\"params\")$P1 #> [1] 5 #>  #> attr(,\"params\")$P2 #> [1] 15 #>  #> attr(,\"params\")$A1 #> [1] 0.0833  # Gaussian HRF print(HRF_GAUSSIAN) #> function (t, mean = 6, sd = 2)  #> { #>     stats::dnorm(t, mean = mean, sd = sd) #> } #> <bytecode: 0x56277ff9c178> #> <environment: namespace:fmrihrf> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"gaussian\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"param_names\") #> [1] \"mean\" \"sd\"   #> attr(,\"params\") #> attr(,\"params\")$mean #> [1] 6 #>  #> attr(,\"params\")$sd #> [1] 2 time_points <- seq(0, 25, by = 0.1)  # Evaluate the HRFs y_spm <- HRF_SPMG1(time_points) y_gauss <- HRF_GAUSSIAN(time_points)  # Manually scale each to peak at 1.0 for easier shape comparison y_spm_scaled <- y_spm / max(y_spm) y_gauss_scaled <- y_gauss / max(y_gauss)  # Combine into a data frame for plotting plot_df <- data.frame(   Time = time_points,   SPM_Canonical = y_spm_scaled,   Gaussian = y_gauss_scaled ) %>%    pivot_longer(-Time, names_to = \"HRF_Type\", values_to = \"Response\")  # Plot using ggplot2 ggplot(plot_df, aes(x = Time, y = Response, color = HRF_Type)) +   geom_line(linewidth = 1) +   labs(title = \"Comparison of SPM Canonical and Gaussian HRFs\",        subtitle = \"HRFs manually scaled to peak at 1.0 for comparison\",        x = \"Time (seconds)\",        y = \"BOLD Response (normalized)\",        color = \"HRF Type\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"modifying-hrf-parameters-with-gen_hrf","dir":"Articles","previous_headings":"","what":"Modifying HRF Parameters with gen_hrf","title":"Hemodynamic Response Functions","text":"gen_hrf function flexible way create new HRF functions, often modifying parameters existing ones. example, hrf_gaussian function takes mean sd arguments. can use gen_hrf create Gaussian HRFs different peak times (mean) widths (sd).  gen_hrf can also directly incorporate lags durations (see later sections).","code":"# Create Gaussian HRFs with different parameters using gen_hrf # Note: hrf_gaussian is the underlying function, not the HRF object HRF_GAUSSIAN hrf_gauss_7_3 <- gen_hrf(hrf_gaussian, mean = 7, sd = 3, name = \"Gaussian (Mean=7, SD=3)\") hrf_gauss_5_2 <- gen_hrf(hrf_gaussian, mean = 5, sd = 2, name = \"Gaussian (Mean=5, SD=2)\") hrf_gauss_4_1 <- gen_hrf(hrf_gaussian, mean = 4, sd = 1, name = \"Gaussian (Mean=4, SD=1)\")  # Evaluate the new HRFs vals1 <- hrf_gauss_7_3(time_points) vals2 <- hrf_gauss_5_2(time_points) vals3 <- hrf_gauss_4_1(time_points)  # Combine for plotting plot_df_params <- data.frame(   Time = time_points,   `Mean=7, SD=3` = vals1,   `Mean=5, SD=2` = vals2,   `Mean=4, SD=1` = vals3 ) %>%   pivot_longer(-Time, names_to = \"Parameters\", values_to = \"Response\")  # Plot ggplot(plot_df_params, aes(x = Time, y = Response, color = Parameters)) +   geom_line(linewidth = 1) +   labs(title = \"Gaussian HRFs with Different Parameters\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Parameters\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"modeling-event-duration-with-block_hrf","dir":"Articles","previous_headings":"","what":"Modeling Event Duration with block_hrf","title":"Hemodynamic Response Functions","text":"fMRI events often duration (e.g., stimulus presented several seconds). block_hrf function (gen_hrf width argument) modifies HRF model response sustained event specific width (duration). Internally, convolves original HRF boxcar function specified width. precision argument controls sampling resolution used convolution.","code":"# Create blocked HRFs using the SPM canonical HRF with different durations hrf_spm_w1 <- block_hrf(HRF_SPMG1, width = 1) hrf_spm_w2 <- block_hrf(HRF_SPMG1, width = 2) hrf_spm_w4 <- block_hrf(HRF_SPMG1, width = 4)  # Evaluate resp_w1 <- hrf_spm_w1(time_points) resp_w2 <- hrf_spm_w2(time_points) resp_w4 <- hrf_spm_w4(time_points)  # Combine for plotting plot_df_blocked <- data.frame(   Time = time_points,   `Width=1s` = resp_w1,   `Width=2s` = resp_w2,   `Width=4s` = resp_w4 ) %>%   pivot_longer(-Time, names_to = \"Duration\", values_to = \"Response\")  # Plot ggplot(plot_df_blocked, aes(x = Time, y = Response, color = Duration)) +   geom_line(linewidth = 1) +   labs(title = \"SPM Canonical HRF for Different Event Durations\",        subtitle = \"Using block_hrf()\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Duration\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"normalization","dir":"Articles","previous_headings":"Modeling Event Duration with block_hrf","what":"Normalization","title":"Hemodynamic Response Functions","text":"default, longer durations lead higher peak responses (assuming summation, see next section). Setting normalize=TRUE block_hrf (gen_hrf) rescales response peak amplitude approximately 1, regardless duration.","code":"# Create normalized blocked HRFs hrf_spm_w1_norm <- block_hrf(HRF_SPMG1, width = 1, normalize = TRUE) hrf_spm_w2_norm <- block_hrf(HRF_SPMG1, width = 2, normalize = TRUE) hrf_spm_w4_norm <- block_hrf(HRF_SPMG1, width = 4, normalize = TRUE)  # Evaluate resp_w1_norm <- hrf_spm_w1_norm(time_points) resp_w2_norm <- hrf_spm_w2_norm(time_points) resp_w4_norm <- hrf_spm_w4_norm(time_points)  # Combine for plotting plot_df_blocked_norm <- data.frame(   Time = time_points,   `Width=1s` = resp_w1_norm,   `Width=2s` = resp_w2_norm,   `Width=4s` = resp_w4_norm ) %>%   pivot_longer(-Time, names_to = \"Duration\", values_to = \"Response\")  # Plot ggplot(plot_df_blocked_norm, aes(x = Time, y = Response, color = Duration)) +   geom_line(linewidth = 1) +   labs(title = \"Normalized SPM Canonical HRF for Different Durations\",        subtitle = \"Using block_hrf(normalize = TRUE)\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Duration\") +   theme_minimal() +   ylim(0, NA) # Ensure y-axis starts at 0"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"modeling-saturation-with-summate","dir":"Articles","previous_headings":"Modeling Event Duration with block_hrf","what":"Modeling Saturation with summate","title":"Hemodynamic Response Functions","text":"summate argument block_hrf controls whether response accumulates duration (summate=TRUE, default) saturates (summate=FALSE). Saturation implies response reaches plateau doesn’t increase longer stimulation.  can combine summate=FALSE normalize=TRUE:","code":"# Create non-summating blocked HRFs hrf_spm_w2_nosum <- block_hrf(HRF_SPMG1, width = 2, summate = FALSE) hrf_spm_w4_nosum <- block_hrf(HRF_SPMG1, width = 4, summate = FALSE) hrf_spm_w8_nosum <- block_hrf(HRF_SPMG1, width = 8, summate = FALSE)  # Evaluate resp_w2_nosum <- hrf_spm_w2_nosum(time_points) resp_w4_nosum <- hrf_spm_w4_nosum(time_points) resp_w8_nosum <- hrf_spm_w8_nosum(time_points)  # Combine for plotting plot_df_blocked_nosum <- data.frame(   Time = time_points,   `Width=2s` = resp_w2_nosum,   `Width=4s` = resp_w4_nosum,   `Width=8s` = resp_w8_nosum ) %>%   pivot_longer(-Time, names_to = \"Duration\", values_to = \"Response\")  # Plot ggplot(plot_df_blocked_nosum, aes(x = Time, y = Response, color = Duration)) +   geom_line(linewidth = 1) +   labs(title = \"Non-Summating (Saturating) SPM HRF for Different Durations\",        subtitle = \"Using block_hrf(summate = FALSE)\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Duration\") +   theme_minimal() # Create normalized, non-summating blocked HRFs hrf_spm_w2_nosum_norm <- block_hrf(HRF_SPMG1, width = 2, summate = FALSE, normalize = TRUE) hrf_spm_w4_nosum_norm <- block_hrf(HRF_SPMG1, width = 4, summate = FALSE, normalize = TRUE) hrf_spm_w8_nosum_norm <- block_hrf(HRF_SPMG1, width = 8, summate = FALSE, normalize = TRUE)  # Evaluate resp_w2_nosum_norm <- hrf_spm_w2_nosum_norm(time_points) resp_w4_nosum_norm <- hrf_spm_w4_nosum_norm(time_points) resp_w8_nosum_norm <- hrf_spm_w8_nosum_norm(time_points)  # Combine for plotting plot_df_blocked_nosum_norm <- data.frame(   Time = time_points,   `Width=2s` = resp_w2_nosum_norm,   `Width=4s` = resp_w4_nosum_norm,   `Width=8s` = resp_w8_nosum_norm ) %>%   pivot_longer(-Time, names_to = \"Duration\", values_to = \"Response\")  # Plot ggplot(plot_df_blocked_nosum_norm, aes(x = Time, y = Response, color = Duration)) +   geom_line(linewidth = 1) +   labs(title = \"Normalized, Non-Summating SPM HRF for Different Durations\",        subtitle = \"Using block_hrf(summate = FALSE, normalize = TRUE)\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Duration\") +   theme_minimal() +   ylim(0, NA)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"modeling-temporal-shifts-with-lag_hrf","dir":"Articles","previous_headings":"","what":"Modeling Temporal Shifts with lag_hrf","title":"Hemodynamic Response Functions","text":"Sometimes, hemodynamic response might delayed advanced relative event onset. lag_hrf function (gen_hrf_lagged) shifts existing HRF time specified lag (seconds). positive lag delays response, negative lag advances .","code":"# Create lagged versions of the Gaussian HRF hrf_gauss_lag_neg2 <- lag_hrf(HRF_GAUSSIAN, lag = -2) hrf_gauss_lag_0 <- HRF_GAUSSIAN # Original (lag=0) hrf_gauss_lag_pos3 <- lag_hrf(HRF_GAUSSIAN, lag = 3)  # Evaluate resp_lag_neg2 <- hrf_gauss_lag_neg2(time_points) resp_lag_0 <- hrf_gauss_lag_0(time_points) resp_lag_pos3 <- hrf_gauss_lag_pos3(time_points)  # Combine for plotting plot_df_lagged <- data.frame(   Time = time_points,   `Lag=-2s` = resp_lag_neg2,   `Lag= 0s` = resp_lag_0,   `Lag=+3s` = resp_lag_pos3 ) %>%   pivot_longer(-Time, names_to = \"Lag\", values_to = \"Response\")  # Plot ggplot(plot_df_lagged, aes(x = Time, y = Response, color = Lag)) +   geom_line(linewidth = 1) +   labs(title = \"Gaussian HRF with Different Temporal Lags\",        subtitle = \"Using lag_hrf()\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Lag\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"combining-lag-and-duration","dir":"Articles","previous_headings":"","what":"Combining Lag and Duration","title":"Hemodynamic Response Functions","text":"can combine lag_hrf block_hrf using pipe operator (%>%) dplyr (magrittr).  Alternatively, gen_hrf can apply lag width directly:","code":"# Create HRFs that are both lagged and blocked hrf_lb_1 <- HRF_GAUSSIAN %>% lag_hrf(1) %>% block_hrf(width = 1, normalize = TRUE) hrf_lb_3 <- HRF_GAUSSIAN %>% lag_hrf(3) %>% block_hrf(width = 3, normalize = TRUE) hrf_lb_5 <- HRF_GAUSSIAN %>% lag_hrf(5) %>% block_hrf(width = 5, normalize = TRUE)  # Evaluate resp_lb_1 <- hrf_lb_1(time_points) resp_lb_3 <- hrf_lb_3(time_points) resp_lb_5 <- hrf_lb_5(time_points)  # Combine for plotting plot_df_lagged_blocked <- data.frame(   Time = time_points,   `Lag=1, Width=1` = resp_lb_1,   `Lag=3, Width=3` = resp_lb_3,   `Lag=5, Width=5` = resp_lb_5 ) %>%   pivot_longer(-Time, names_to = \"Settings\", values_to = \"Response\")  # Plot ggplot(plot_df_lagged_blocked, aes(x = Time, y = Response, color = Settings)) +   geom_line(linewidth = 1) +   labs(title = \"Gaussian HRFs with Combined Lag and Duration\",        subtitle = \"Using lag_hrf() %>% block_hrf()\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Settings\") +   theme_minimal() +   ylim(0, NA) # Using gen_hrf directly hrf_lb_gen_3 <- gen_hrf(hrf_gaussian, lag = 3, width = 3, normalize = TRUE) resp_lb_gen_3 <- hrf_lb_gen_3(time_points)  # Compare (should be very similar to hrf_lb_3 from piped version) # plot(time_points, resp_lb_3, type = 'l', col = 2, lwd = 2, main = \"Piped vs gen_hrf\") # lines(time_points, resp_lb_gen_3, col = 1, lty = 2, lwd = 2) # legend(\"topright\", legend = c(\"Piped\", \"gen_hrf\"), col = c(2, 1), lty = c(1, 2), lwd = 2)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"multivariate-hrfs-basis-sets","dir":"Articles","previous_headings":"","what":"Multivariate HRFs: Basis Sets","title":"Hemodynamic Response Functions","text":"Instead assuming fixed HRF shape, can model response using linear combination multiple basis functions. allows flexibility capturing variations HRF shape across brain regions individuals. resulting HRF function returns matrix column corresponds basis function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"spm-basis-sets","dir":"Articles","previous_headings":"Multivariate HRFs: Basis Sets","what":"SPM Basis Sets","title":"Hemodynamic Response Functions","text":"fmrihrf provides pre-defined HRF objects SPM canonical HRF plus temporal derivative (HRF_SPMG2), additionally dispersion derivative (HRF_SPMG3).","code":"# SPM + Temporal Derivative (2 basis functions) print(HRF_SPMG2) #> function (t)  #> { #>     do.call(cbind, lapply(xs, function(f) f(t))) #> } #> <bytecode: 0x56277e0b1608> #> <environment: 0x56277e0ac088> #> attr(,\"class\") #> [1] \"SPMG2_HRF\" \"HRF\"       \"function\"  #> attr(,\"name\") #> [1] \"SPMG2\" #> attr(,\"nbasis\") #> [1] 2 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_spmg2 <- HRF_SPMG2(time_points)  # SPM + Temporal + Dispersion Derivatives (3 basis functions) print(HRF_SPMG3) #> function (t)  #> { #>     do.call(cbind, lapply(xs, function(f) f(t))) #> } #> <bytecode: 0x56277e19f210> #> <environment: 0x56277e17bfd8> #> attr(,\"class\") #> [1] \"SPMG3_HRF\" \"HRF\"       \"function\"  #> attr(,\"name\") #> [1] \"SPMG3\" #> attr(,\"nbasis\") #> [1] 3 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_spmg3 <- HRF_SPMG3(time_points)  # Plot SPMG2 matplot(time_points, resp_spmg2, type = 'l', lty = 1, lwd = 1.5,         xlab = \"Time (seconds)\", ylab = \"BOLD Response\",         main = \"SPM + Temporal Derivative Basis Set (HRF_SPMG2)\") legend(\"topright\", legend = c(\"Canonical\", \"Temporal Deriv.\"), col = 1:2, lty = 1, lwd = 1.5) # Plot SPMG3 matplot(time_points, resp_spmg3, type = 'l', lty = 1, lwd = 1.5,         xlab = \"Time (seconds)\", ylab = \"BOLD Response\",         main = \"SPM + Temporal + Dispersion Derivative Basis Set (HRF_SPMG3)\") legend(\"topright\", legend = c(\"Canonical\", \"Temporal Deriv.\", \"Dispersion Deriv.\"), col = 1:3, lty = 1, lwd = 1.5)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"b-spline-basis-set","dir":"Articles","previous_headings":"Multivariate HRFs: Basis Sets","what":"B-Spline Basis Set","title":"Hemodynamic Response Functions","text":"hrf_bspline function generates B-spline basis set. typically use within gen_hrf create HRF object. Key parameters N (number basis functions) degree.","code":"# B-spline basis with N=5 basis functions, degree=3 (cubic) hrf_bs_5_3 <- gen_hrf(hrf_bspline, N = 5, degree = 3, name = \"B-spline (N=5, deg=3)\") print(hrf_bs_5_3) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56277f66f460> #> <environment: 0x56277efc8150> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"B-spline (N=5, deg=3)\" #> attr(,\"nbasis\") #> [1] 5 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_bs_5_3 <- hrf_bs_5_3(time_points) matplot(time_points, resp_bs_5_3, type = 'l', lty = 1, lwd = 1.5,         xlab = \"Time (seconds)\", ylab = \"BOLD Response\",         main = \"B-spline Basis Set (N=5, degree=3)\") # B-spline basis with N=10 basis functions, degree=1 (linear -> tent functions) hrf_bs_10_1 <- gen_hrf(hrf_bspline, N = 10, degree = 1, name = \"Tent Set (N=10)\") print(hrf_bs_10_1) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56277f66f460> #> <environment: 0x56277f5abd20> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"Tent Set (N=10)\" #> attr(,\"nbasis\") #> [1] 10 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_bs_10_1 <- hrf_bs_10_1(time_points) matplot(time_points, resp_bs_10_1, type = 'l', lty = 1, lwd = 1.5,         xlab = \"Time (seconds)\", ylab = \"BOLD Response\",         main = \"Tent Function Basis Set (B-spline, N=10, degree=1)\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"sine-basis-set","dir":"Articles","previous_headings":"Multivariate HRFs: Basis Sets","what":"Sine Basis Set","title":"Hemodynamic Response Functions","text":"hrf_sine function creates basis set using sine waves different frequencies.","code":"hrf_sin_5 <- gen_hrf(hrf_sine, N = 5, name = \"Sine Basis (N=5)\") print(hrf_sin_5) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56277f66f460> #> <environment: 0x56277fcc43f8> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"Sine Basis (N=5)\" #> attr(,\"nbasis\") #> [1] 5 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_sin_5 <- hrf_sin_5(time_points) matplot(time_points, resp_sin_5, type = 'l', lty = 1, lwd = 1.5,         xlab = \"Time (seconds)\", ylab = \"BOLD Response\",         main = \"Sine Basis Set (N=5)\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"half-cosine-basis-set-flobs-like","dir":"Articles","previous_headings":"Multivariate HRFs: Basis Sets","what":"Half-Cosine Basis Set (FLOBS-like)","title":"Hemodynamic Response Functions","text":"hrf_half_cosine function implements basis set described Woolrich et al. (2004), often used FSL’s FLOBS (FMRIB’s Linear Optimal Basis Sets). uses four half-cosine functions model initial dip, rise, fall/undershoot, recovery.","code":"# Use default parameters from Woolrich et al. (2004) # Note: hrf_half_cosine itself returns a single HRF shape, not a basis set directly. # To use as a basis in modeling, you'd typically include it alongside derivatives # or other basis functions. Here we just visualize the shape. resp_half_cos <- hrf_half_cosine(time_points) plot(time_points, resp_half_cos, type = 'l', lwd = 1.5,      xlab = \"Time (seconds)\", ylab = \"BOLD Response\",      main = \"Half-Cosine HRF Shape (Woolrich et al., 2004)\")"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"gamma-hrf","dir":"Articles","previous_headings":"Other HRF Shapes","what":"Gamma HRF","title":"Hemodynamic Response Functions","text":"hrf_gamma function uses gamma probability density function. ````","code":"hrf_gam <- gen_hrf(hrf_gamma, shape = 6, rate = 1, name = \"Gamma (shape=6, rate=1)\") print(hrf_gam) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56277f66f460> #> <environment: 0x56277c13e068> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"Gamma (shape=6, rate=1)\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_gam <- hrf_gam(time_points) plot(time_points, resp_gam, type = 'l', lwd = 1.5,      xlab = \"Time (seconds)\", ylab = \"BOLD Response\",      main = \"Gamma HRF\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"mexican-hat-wavelet-hrf","dir":"Articles","previous_headings":"Other HRF Shapes","what":"Mexican Hat Wavelet HRF","title":"Hemodynamic Response Functions","text":"hrf_mexhat function uses Mexican hat wavelet (second derivative Gaussian).","code":"hrf_mh <- gen_hrf(hrf_mexhat, mean = 6, sd = 1.5, name = \"Mexican Hat (mean=6, sd=1.5)\") print(hrf_mh) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56277f66f460> #> <environment: 0x56277d6ebec0> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"Mexican Hat (mean=6, sd=1.5)\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_mh <- hrf_mh(time_points) plot(time_points, resp_mh, type = 'l', lwd = 1.5,      xlab = \"Time (seconds)\", ylab = \"BOLD Response\",      main = \"Mexican Hat Wavelet HRF\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"inverse-logit-difference-hrf","dir":"Articles","previous_headings":"Other HRF Shapes","what":"Inverse Logit Difference HRF","title":"Hemodynamic Response Functions","text":"hrf_inv_logit function creates HRF shape subtracting two inverse logit (sigmoid) functions, allowing control rise fall times.","code":"hrf_il <- gen_hrf(hrf_inv_logit, mu1 = 5, s1 = 1, mu2 = 15, s2 = 1.5, name = \"Inv. Logit Diff.\") print(hrf_il) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56277f66f460> #> <environment: 0x56277dd92538> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"Inv. Logit Diff.\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() resp_il <- hrf_il(time_points) plot(time_points, resp_il, type = 'l', lwd = 1.5,      xlab = \"Time (seconds)\", ylab = \"BOLD Response\",      main = \"Inverse Logit Difference HRF\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"creating-custom-basis-sets-with-gen_hrf_set","dir":"Articles","previous_headings":"","what":"Creating Custom Basis Sets with gen_hrf_set","title":"Hemodynamic Response Functions","text":"gen_hrf_set function allows combine set HRF functions single multivariate HRF object (basis set). example, can create basis set series lagged Gaussian HRFs:","code":"# Create a list of lagged Gaussian HRFs lag_times <- seq(0, 10, by = 2) list_of_hrfs <- lapply(lag_times, function(lag) {   lag_hrf(HRF_GAUSSIAN, lag = lag) })  # Combine them into a single HRF basis set object hrf_custom_set <- do.call(gen_hrf_set, list_of_hrfs) print(hrf_custom_set) # Note: name is default 'hrf_set', nbasis is 6 #> function (t)  #> { #>     do.call(cbind, lapply(xs, function(f) f(t))) #> } #> <bytecode: 0x56277e8c8e78> #> <environment: 0x56277e8cb888> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"hrf_set\" #> attr(,\"nbasis\") #> [1] 6 #> attr(,\"span\") #> [1] 34 #> attr(,\"params\") #> list()  # Evaluate and plot resp_custom_set <- hrf_custom_set(time_points) matplot(time_points, resp_custom_set, type = 'l', lty = 1, lwd = 1.5,         xlab = \"Time (seconds)\", ylab = \"BOLD Response\",         main = \"Custom Basis Set (Lagged Gaussians)\")"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"from-a-single-measured-response-gen_empirical_hrf","dir":"Articles","previous_headings":"Creating Empirical HRFs","what":"From a Single Measured Response (gen_empirical_hrf)","title":"Hemodynamic Response Functions","text":"measured estimated hemodynamic response profile (e.g., deconvolution), can turn HRF function using gen_empirical_hrf. uses linear interpolation provided points.","code":"# Simulate an average measured response profile sim_times <- 0:24 set.seed(42) # For reproducibility sim_profile <- rowMeans(replicate(20, {   h <- HRF_SPMG1 %>% lag_hrf(lag = runif(n = 1, min = -1, max = 1)) %>%                     block_hrf(width = runif(n = 1, min = 0, max = 2))   h(sim_times) }))  # Normalize profile to max = 1 for better visualization sim_profile_norm <- sim_profile / max(sim_profile)  # Create the empirical HRF function from the normalized profile emp_hrf <- gen_empirical_hrf(sim_times, sim_profile_norm) print(emp_hrf) #> function (v)  #> .approxfun(x, y, v, method, yleft, yright, f, na.rm) #> <bytecode: 0x56277fb3fd48> #> <environment: 0x56277b5fcf50> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"empirical_hrf\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list()  # Evaluate and plot (using a finer time grid for interpolation) fine_times <- seq(0, 24, by = 0.1) resp_emp <- emp_hrf(fine_times)  # Plot the interpolated curve with the original points plot(fine_times, resp_emp, type = 'l', lwd = 1.5,      xlab = \"Time (seconds)\", ylab = \"BOLD Response\",      main = \"Empirical HRF from Simulated Average Profile\") points(sim_times, sim_profile_norm, pch = 16, col = \"red\", cex = 1) # Show original points"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_01_hemodynamic_response.html","id":"empirical-basis-set-via-pca","dir":"Articles","previous_headings":"Creating Empirical HRFs","what":"Empirical Basis Set via PCA","title":"Hemodynamic Response Functions","text":"can create empirical basis set applying dimensionality reduction (like PCA) collection observed simulated HRFs.   empirical basis set can used regression models just like pre-defined custom basis set.","code":"# 1. Simulate a matrix of diverse HRFs set.seed(123) # for reproducibility n_sim <- 50 sim_mat <- replicate(n_sim, {   hrf_func <- HRF_SPMG1 %>%               lag_hrf(lag = runif(1, -2, 2)) %>%               block_hrf(width = runif(1, 0, 3))   hrf_func(sim_times) })  # Show a sample of simulated HRFs to illustrate variability  matplot(sim_times, sim_mat[, 1:10], type = 'l', col = scales::alpha(\"gray\", 0.7), lty = 1,         xlab = \"Time (seconds)\", ylab = \"Response\",          main = \"Sample of Simulated HRF Profiles\") # 2. Perform PCA on the transpose (each column = one HRF, each row = one time point) pca_res <- prcomp(t(sim_mat), center = TRUE, scale. = FALSE) n_components <- 3  # Print variance explained by top components variance_explained <- summary(pca_res)$importance[2, 1:n_components] cat(\"Variance explained by top\", n_components, \"components:\",      paste0(round(variance_explained * 100, 1), \"%\"), \"\\n\") #> Variance explained by top 3 components: 67.1% 29.9% 2.7%  # Extract the top principal components pc_vectors <- pca_res$rotation[, 1:n_components]  # 3. Convert principal components into HRF functions # Create list to store our empirical HRF functions list_pc_hrfs <- list()  for (i in 1:n_components) {   # Get the PC vector   pc_vec <- pc_vectors[, i]      # Start at 0 (shift so first value is 0)   pc_vec_zeroed <- pc_vec - pc_vec[1]      # Normalize peak to 1 (or -1 if the peak is negative)   max_abs <- max(abs(pc_vec_zeroed))   pc_vec_norm <- pc_vec_zeroed / max_abs      # Create empirical HRF function   list_pc_hrfs[[i]] <- gen_empirical_hrf(sim_times, pc_vec_norm) }  # 4. Combine PC HRFs into a basis set using gen_hrf_set emp_pca_basis <- do.call(gen_hrf_set, list_pc_hrfs) print(emp_pca_basis) #> function (t)  #> { #>     do.call(cbind, lapply(xs, function(f) f(t))) #> } #> <bytecode: 0x56277e8c8e78> #> <environment: 0x56277da0c300> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"hrf_set\" #> attr(,\"nbasis\") #> [1] 3 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list()  # 5. Evaluate and plot the basis functions resp_pca_basis <- emp_pca_basis(sim_times)  # Create a prettier plot of the PCA basis functions pc_df <- as.data.frame(resp_pca_basis) names(pc_df) <- paste(\"PC\", 1:n_components) pc_df$Time <- sim_times  # Use ggplot for a nicer visualization pc_df_long <- pivot_longer(pc_df, -Time, names_to = \"Component\", values_to = \"Value\")  ggplot(pc_df_long, aes(x = Time, y = Value, color = Component)) +   geom_line(linewidth = 1.2) +   scale_color_brewer(palette = \"Set1\") +   labs(title = \"Empirical Basis Set from PCA\",        subtitle = paste0(\"First \", n_components, \" Principal Components\"),        x = \"Time (seconds)\",        y = \"Component Value\") +   theme_minimal() +   theme(legend.position = \"right\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"introduction-what-is-a-regressor","dir":"Articles","previous_headings":"","what":"Introduction: What is a Regressor?","title":"Building fMRI Regressors","text":"fMRI analysis, regressor (predictor) represents expected BOLD signal timecourse associated specific experimental condition event type. ’s typically created convolving series event onsets (often represented delta functions “sticks”) hemodynamic response function (HRF). fmrihrf provides regressor() function easily create objects event timings HRF. regressor objects often constructed automatically modeling functions packages, vignette explores create manipulate directly, offering finer control model components.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"basic-regressor-from-event-onsets","dir":"Articles","previous_headings":"","what":"Basic Regressor from Event Onsets","title":"Building fMRI Regressors","text":"Suppose simple event-related fMRI design stimuli presented every 12 seconds. want model events using SPM canonical HRF (HRF_SPMG1). events brief, model duration 0 seconds (instantaneous).","code":"# Define event onsets onsets <- seq(0, 10 * 12, by = 12)  # Create the regressor object # Uses HRF_SPMG1 by default if no hrf is specified # Duration is 0 by default reg1 <- regressor(onsets = onsets, hrf = HRF_SPMG1)  # Print the regressor object to see its properties (uses new print.Reg method) print(reg1)  # Access components using helper functions head(onsets(reg1)) #> [1]  0 12 24 36 48 60 nbasis(reg1) #> [1] 1"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"evaluating-and-plotting-a-regressor","dir":"Articles","previous_headings":"","what":"Evaluating and Plotting a Regressor","title":"Building fMRI Regressors","text":"regressor object stores event information doesn’t automatically compute timecourse. get predicted BOLD signal specific time points (e.g., corresponding scan acquisition times), use evaluate() function.","code":"# Define a time grid corresponding to scan times (e.g., TR=2s) TR <- 2 scan_times <- seq(0, 140, by = TR)  # Evaluate the regressor at scan times predicted_bold <- evaluate(reg1, scan_times)  # Plot the predicted timecourse using ggplot2 plot_df <- data.frame(Time = scan_times, Response = predicted_bold) ggplot(plot_df, aes(x = Time, y = Response)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg1), linetype = \"dashed\", color = \"red\", alpha = 0.7) +   labs(title = \"Predicted BOLD Response (SPM HRF)\",        x = \"Time (seconds)\",        y = \"Predicted Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"varying-event-durations","dir":"Articles","previous_headings":"","what":"Varying Event Durations","title":"Building fMRI Regressors","text":"Sometimes events different durations. duration argument regressor() can take vector matching length onsets.","code":"# Example onsets and durations onsets_var_dur <- seq(0, 5 * 12, length.out = 6) durations_var <- 1:length(onsets_var_dur) # Durations increase from 1s to 6s  # Create regressor with varying durations reg_var_dur <- regressor(onsets_var_dur, HRF_SPMG1, duration = durations_var) print(reg_var_dur)  # Evaluate and plot scan_times_dur <- seq(0, max(onsets_var_dur) + 30, by = TR) pred_var_dur <- evaluate(reg_var_dur, scan_times_dur)  plot_df_dur <- data.frame(Time = scan_times_dur, Response = pred_var_dur) ggplot(plot_df_dur, aes(x = Time, y = Response)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg_var_dur), linetype = \"dashed\", color = \"red\", alpha = 0.7) +   labs(title = \"Regressor with Varying Event Durations\",        subtitle = \"Duration increases over time\",        x = \"Time (seconds)\",        y = \"Predicted Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"duration-and-summation","dir":"Articles","previous_headings":"Varying Event Durations","what":"Duration and Summation","title":"Building fMRI Regressors","text":"default (summate=TRUE), predicted response accumulates events overlap extended duration. Setting summate=FALSE models saturation, response width increases duration, peak amplitude doesn’t necessarily.","code":"# Create regressor with varying durations, summate=FALSE reg_var_dur_nosum <- regressor(onsets_var_dur, HRF_SPMG1,                                 duration = durations_var, summate = FALSE)  # Evaluate and plot pred_var_dur_nosum <- evaluate(reg_var_dur_nosum, scan_times_dur)  plot_df_dur_nosum <- data.frame(Time = scan_times_dur, Response = pred_var_dur_nosum) ggplot(plot_df_dur_nosum, aes(x = Time, y = Response)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg_var_dur_nosum), linetype = \"dashed\", color = \"red\", alpha = 0.7) +   labs(title = \"Regressor with Varying Durations (summate=FALSE)\",        subtitle = \"Models saturation, peak height may not increase with duration\",        x = \"Time (seconds)\",        y = \"Predicted Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"varying-event-amplitudes-parametric-modulation","dir":"Articles","previous_headings":"","what":"Varying Event Amplitudes (Parametric Modulation)","title":"Building fMRI Regressors","text":"can model variations event intensity associated parameter providing amplitude vector. creates parametric regressor height HRF event scaled corresponding amplitude value.","code":"# Example onsets and amplitudes (e.g., representing task difficulty) onsets_amp <- seq(0, 10 * 12, length.out = 11) amplitudes_raw <- 1:length(onsets_amp)  # It's common practice to center the modulator amplitudes_scaled <- scale(amplitudes_raw, center = TRUE, scale = FALSE)  # Create the parametric regressor reg_amp <- regressor(onsets_amp, HRF_SPMG1, amplitude = amplitudes_scaled) print(reg_amp)  # Evaluate and plot scan_times_amp <- seq(0, max(onsets_amp) + 30, by = TR) pred_amp <- evaluate(reg_amp, scan_times_amp)  plot_df_amp <- data.frame(Time = scan_times_amp, Response = pred_amp) ggplot(plot_df_amp, aes(x = Time, y = Response)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg_amp), linetype = \"dashed\", color = \"red\", alpha = 0.7) +   # Add points showing amplitude (scaled for visibility)   geom_point(data = data.frame(Time = onsets(reg_amp), Amplitude = amplitudes(reg_amp)),              aes(x = Time, y = Amplitude * 0.2), color = \"blue\", size = 2) +   labs(title = \"Parametric Regressor with Varying Amplitude\",        subtitle = \"Amplitude (centered) increases over time\",        x = \"Time (seconds)\",        y = \"Predicted Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"combining-duration-and-amplitude-modulation","dir":"Articles","previous_headings":"","what":"Combining Duration and Amplitude Modulation","title":"Building fMRI Regressors","text":"can provide duration amplitude vectors model events vary aspects.","code":"set.seed(123) onsets_comb <- seq(0, 10 * 12, length.out = 11) amps_comb <- scale(1:length(onsets_comb), center = TRUE, scale = FALSE) durs_comb <- sample(1:5, length(onsets_comb), replace = TRUE)  reg_comb <- regressor(onsets_comb, HRF_SPMG1,                        amplitude = amps_comb, duration = durs_comb) print(reg_comb)  # Evaluate and plot scan_times_comb <- seq(0, max(onsets_comb) + 30, by = TR) pred_comb <- evaluate(reg_comb, scan_times_comb)  plot_df_comb <- data.frame(Time = scan_times_comb, Response = pred_comb) ggplot(plot_df_comb, aes(x = Time, y = Response)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg_comb), linetype = \"dashed\", color = \"red\", alpha = 0.7) +   labs(title = \"Regressor with Varying Duration and Amplitude\",        x = \"Time (seconds)\",        y = \"Predicted Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"regressors-with-hrf-basis-sets","dir":"Articles","previous_headings":"","what":"Regressors with HRF Basis Sets","title":"Building fMRI Regressors","text":"use HRF object multiple basis functions (e.g., HRF_SPMG3, HRF_BSPLINE), regressor object represent multiple timecourses, one basis function. evaluate() return matrix.","code":"# Use a B-spline basis set onsets_basis <- seq(0, 10 * 12, length.out = 11) hrf_basis <- HRF_BSPLINE # Uses N=5 basis functions by default  reg_basis <- regressor(onsets_basis, hrf_basis) print(reg_basis) nbasis(reg_basis) # Should be 5 #> [1] 5  # Evaluate - this returns a matrix scan_times_basis <- seq(0, max(onsets_basis) + 30, by = TR) pred_basis_matrix <- evaluate(reg_basis, scan_times_basis) dim(pred_basis_matrix) # rows = time points, cols = basis functions #> [1] 76  5  # Or plot manually with ggplot colnames(pred_basis_matrix) <- paste0(\"Basis_\", 1:ncol(pred_basis_matrix)) plot_df_basis <- as.data.frame(pred_basis_matrix) %>%    mutate(Time = scan_times_basis) %>%    pivot_longer(-Time, names_to = \"Basis\", values_to = \"Response\")  ggplot(plot_df_basis, aes(x = Time, y = Response, color = Basis)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg_basis), linetype = \"dashed\", color = \"red\", alpha = 0.3) +   labs(title = \"Regressor using B-Spline Basis Set (N=5)\",        x = \"Time (seconds)\",        y = \"Predicted Response\",        color = \"Basis Function\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_02_regressor.html","id":"shifting-regressors","dir":"Articles","previous_headings":"","what":"Shifting Regressors","title":"Building fMRI Regressors","text":"can temporally shift onsets within regressor using shift() method.","code":"# Original regressor reg_orig <- regressor(onsets = c(10, 30, 50), hrf = HRF_SPMG1)  # Shifted regressor (delay by 5 seconds) reg_shifted <- shift(reg_orig, shift_amount = 5)  onsets(reg_orig) #> [1] 10 30 50 onsets(reg_shifted) # Onsets are now 15, 35, 55 #> [1] 15 35 55  # Plot both scan_times_shift <- seq(0, 80, by = TR) pred_orig <- evaluate(reg_orig, scan_times_shift) pred_shifted <- evaluate(reg_shifted, scan_times_shift)  plot_df_shift <- data.frame(   Time = scan_times_shift,   Original = pred_orig,   Shifted_p5s = pred_shifted ) %>%    pivot_longer(-Time, names_to = \"Regressor\", values_to = \"Response\")  ggplot(plot_df_shift, aes(x = Time, y = Response, color = Regressor)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = onsets(reg_orig), linetype = \"dashed\", color = \"red\", alpha = 0.5) +   geom_vline(xintercept = onsets(reg_shifted), linetype = \"dashed\", color = \"blue\", alpha = 0.5) +   labs(title = \"Shifting a Regressor\",        subtitle = \"Original (red lines) vs. Shifted +5s (blue lines)\",        x = \"Time (seconds)\",        y = \"Predicted Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_03_hrf_generators.html","id":"why-generators","dir":"Articles","previous_headings":"","what":"Why Generators?","title":"HRF Generators","text":"pre-defined HRFs fmrihrf (like HRF_SPMG1 HRF_GAUSSIAN) ready--use objects. However, HRFs actually generators. generator function creates new HRF object call . allows specify number basis functions (nbasis) time span (span) creation time. library provides generators flexible basis sets B-splines finite impulse response (FIR) models. available internal HRF_REGISTRY also returned list_available_hrfs() type “generator”.","code":"list_available_hrfs(details = TRUE) %>%   dplyr::filter(type == \"generator\") #>       name      type nbasis_default is_alias                description #> 1  bspline generator              5    FALSE   bspline HRF (generator)  #> 2     tent generator              5    FALSE      tent HRF (generator)  #> 3  fourier generator              5    FALSE   fourier HRF (generator)  #> 4 daguerre generator              3    FALSE  daguerre HRF (generator)  #> 5      fir generator             12    FALSE       fir HRF (generator)  #> 6      lwu generator       variable    FALSE       lwu HRF (generator)  #> 7       bs generator              5     TRUE bs HRF (generator) (alias)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_03_hrf_generators.html","id":"creating-a-basis-with-a-generator","dir":"Articles","previous_headings":"","what":"Creating a Basis with a Generator","title":"HRF Generators","text":"obtain actual HRF object generator, simply call generator function desired parameters. example, create B-spline basis 8 functions spanning 32 seconds: returned value standard HRF object, can evaluate use model formulas like HRF.","code":"# Create a B-spline basis using gen_hrf bs8 <- gen_hrf(hrf_bspline, N = 8, span = 32) print(bs8) #> function (t)  #> hrf(t, ...) #> <bytecode: 0x56183f089e18> #> <environment: 0x56183f088f70> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"hrf_bspline\" #> attr(,\"nbasis\") #> [1] 8 #> attr(,\"span\") #> [1] 32 #> attr(,\"params\") #> list() times <- seq(0, 32, by = 0.5) mat <- bs8(times) head(mat) #>              1          2            3 4 5 6 7 8 #> [1,] 0.0000000 0.00000000 0.0000000000 0 0 0 0 0 #> [2,] 0.3081055 0.02164714 0.0003255208 0 0 0 0 0 #> [3,] 0.4960938 0.07942708 0.0026041667 0 0 0 0 0 #> [4,] 0.5844727 0.16259766 0.0087890625 0 0 0 0 0 #> [5,] 0.5937500 0.26041667 0.0208333333 0 0 0 0 0 #> [6,] 0.5444336 0.36214193 0.0406901042 0 0 0 0 0"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_03_hrf_generators.html","id":"visualising-fir-basis-functions","dir":"Articles","previous_headings":"","what":"Visualising FIR Basis Functions","title":"HRF Generators","text":"quick look FIR basis generated 10 bins 20 second window:","code":"# Use the pre-defined FIR basis or create one with gen_hrf fir10 <- HRF_FIR  # Pre-defined FIR with 12 basis functions resp <- fir10(times)  fir_df <- data.frame(Time = times, resp) fir_long <- tidyr::pivot_longer(fir_df, -Time)  ggplot(fir_long, aes(Time, value, colour = name)) +   geom_line(linewidth = 1) +   labs(title = \"Finite Impulse Response Basis\",        x = \"Time (s)\", y = \"Response\") +   theme_minimal() +   theme(legend.position = \"none\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_03_hrf_generators.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"HRF Generators","text":"Generator functions simple factories let customise flexible HRF bases. return normal HRF objects, means can evaluate , combine decorators, insert regressors just like built-HRFs. ````","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced HRF Modeling and Design","text":"vignette explores advanced features fmrihrf systematic HRF modeling, regularization, experimental design. ’ll cover five key functions extend basic HRF framework: hrf_library(): Creating systematic collections HRF variants reconstruction_matrix(): Converting basis coefficients back HRF shapes regressor_set(): Managing multi-condition experimental designs regressor_design(): Building design matrices complex experimental blocks tools essential advanced fMRI modeling need flexibility HRF specification, robust estimation limited data, complex experimental designs.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"hrf-libraries-systematic-parameter-exploration","dir":"Articles","previous_headings":"","what":"HRF Libraries: Systematic Parameter Exploration","title":"Advanced HRF Modeling and Design","text":"hrf_library() function creates collections HRF variants systematically varying parameters. useful exploring different HRF assumptions affect model building data-driven HRF basis sets.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"example-1-library-of-gamma-hrfs","dir":"Articles","previous_headings":"HRF Libraries: Systematic Parameter Exploration","what":"Example 1: Library of Gamma HRFs","title":"Advanced HRF Modeling and Design","text":"Let’s create library gamma HRFs different shape rate parameters:","code":"# Define parameter grid for gamma HRFs gamma_params <- expand.grid(   shape = c(4, 6, 8),   rate = c(0.8, 1.0, 1.2) ) print(gamma_params) #>   shape rate #> 1     4  0.8 #> 2     6  0.8 #> 3     8  0.8 #> 4     4  1.0 #> 5     6  1.0 #> 6     8  1.0 #> 7     4  1.2 #> 8     6  1.2 #> 9     8  1.2  # Create a generator function for gamma HRFs make_gamma_hrf <- function(shape, rate) {   gen_hrf(hrf_gamma, shape = shape, rate = rate, name = paste0(\"Gamma_\", shape, \"_\", rate)) }  # Create HRF library gamma_lib <- hrf_library(make_gamma_hrf, gamma_params) print(gamma_lib) #> function (t)  #> { #>     do.call(cbind, lapply(xs, function(f) f(t))) #> } #> <bytecode: 0x559a3b945540> #> <environment: 0x559a3b947fc0> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"Gamma_4_0.8 + Gamma_6_0.8 + Gamma_8_0.8 + Gamma_4_1 + Gamma_6_1 + Gamma_8_1 + Gamma_4_1.2 + Gamma_6_1.2 + Gamma_8_1.2\" #> attr(,\"nbasis\") #> [1] 9 #> attr(,\"span\") #> [1] 24 #> attr(,\"params\") #> list() nbasis(gamma_lib) # 9 HRFs total (3 x 3 grid) #> [1] 9  # Evaluate and visualize time_points <- seq(0, 20, by = 0.1) gamma_responses <- gamma_lib(time_points)  # Convert to long format for plotting gamma_df <- as.data.frame(gamma_responses) names(gamma_df) <- paste0(\"Shape\", gamma_params$shape, \"_Rate\", gamma_params$rate) gamma_df$Time <- time_points  gamma_long <- pivot_longer(gamma_df, -Time, names_to = \"Parameters\", values_to = \"Response\")  # Create a more informative plot ggplot(gamma_long, aes(x = Time, y = Response, color = Parameters)) +   geom_line(linewidth = 1) +   scale_color_viridis_d() +   labs(title = \"Library of Gamma HRFs\",        subtitle = \"Systematic variation of shape and rate parameters\",        x = \"Time (seconds)\",        y = \"HRF Response\") +   theme_minimal() +   theme(legend.position = \"right\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"example-2-library-of-lagged-spm-hrfs","dir":"Articles","previous_headings":"HRF Libraries: Systematic Parameter Exploration","what":"Example 2: Library of Lagged SPM HRFs","title":"Advanced HRF Modeling and Design","text":"’s create library SPM canonical HRF different temporal lags:","code":"# Parameter grid for temporal lags lag_params <- data.frame(lag = seq(-2, 4, by = 1)) print(lag_params) #>   lag #> 1  -2 #> 2  -1 #> 3   0 #> 4   1 #> 5   2 #> 6   3 #> 7   4  # Create library using a helper function that applies lag_hrf create_lagged_spm <- function(lag) {   lag_hrf(HRF_SPMG1, lag = lag) }  spm_lag_lib <- hrf_library(create_lagged_spm, lag_params) print(spm_lag_lib) #> function (t)  #> { #>     do.call(cbind, lapply(xs, function(f) f(t))) #> } #> <bytecode: 0x559a3b945540> #> <environment: 0x559a38ca5af8> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"SPMG1_lag(-2) + SPMG1_lag(-1) + SPMG1_lag(0) + SPMG1_lag(1) + SPMG1_lag(2) + SPMG1_lag(3) + SPMG1_lag(4)\" #> attr(,\"nbasis\") #> [1] 7 #> attr(,\"span\") #> [1] 28 #> attr(,\"params\") #> list()  # Evaluate and plot spm_lag_responses <- spm_lag_lib(time_points) spm_lag_df <- as.data.frame(spm_lag_responses) names(spm_lag_df) <- paste0(\"Lag_\", lag_params$lag, \"s\") spm_lag_df$Time <- time_points  spm_lag_long <- pivot_longer(spm_lag_df, -Time, names_to = \"Lag\", values_to = \"Response\")  ggplot(spm_lag_long, aes(x = Time, y = Response, color = Lag)) +   geom_line(linewidth = 1) +   scale_color_viridis_d() +   labs(title = \"Library of Lagged SPM Canonical HRFs\",        subtitle = \"Temporal lags from -2 to +4 seconds\",        x = \"Time (seconds)\",        y = \"HRF Response\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"reconstruction-matrices-from-coefficients-to-hrf-shapes","dir":"Articles","previous_headings":"","what":"Reconstruction Matrices: From Coefficients to HRF Shapes","title":"Advanced HRF Modeling and Design","text":"reconstruction process converts set basis coefficients continuous HRF shape. Understanding transformation key interpreting estimated HRFs fMRI analyses.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"how-reconstruction-works","dir":"Articles","previous_headings":"Reconstruction Matrices: From Coefficients to HRF Shapes","what":"How Reconstruction Works","title":"Advanced HRF Modeling and Design","text":"","code":"# Use a small basis for clear visualization basis_set <- gen_hrf(hrf_bspline, N = 5, degree = 3, span = 30) eval_times <- seq(0, 30, by = 0.1)  # The reconstruction matrix: each column is a basis function evaluated at time points recon_matrix <- basis_set(eval_times) print(paste(\"Reconstruction matrix dimensions:\", nrow(recon_matrix), \"time points x\",              ncol(recon_matrix), \"basis functions\")) #> [1] \"Reconstruction matrix dimensions: 301 time points x 5 basis functions\"  # Let's visualize the basis functions themselves first basis_df <- as.data.frame(recon_matrix) names(basis_df) <- paste0(\"B\", 1:5) basis_df$Time <- eval_times  basis_long <- pivot_longer(basis_df, -Time, names_to = \"Basis\", values_to = \"Value\")  ggplot(basis_long, aes(x = Time, y = Value, color = Basis)) +   geom_line(linewidth = 1.2) +   scale_color_viridis_d(option = \"turbo\") +   labs(title = \"B-spline Basis Functions\",        subtitle = \"Each basis function covers a different time window\",        x = \"Time (seconds)\",        y = \"Basis Function Value\") +   theme_minimal() # Now demonstrate reconstruction with different coefficient patterns coefficient_sets <- list(   \"Early Peak\" = c(0.2, 1.0, 0.3, 0.0, 0.0),   \"Canonical\" = c(0.0, 0.3, 1.0, 0.4, -0.1),   \"Late Peak\" = c(0.0, 0.0, 0.3, 1.0, 0.2),   \"Double Peak\" = c(0.0, 0.8, 0.2, 0.9, 0.0) )  # Reconstruct HRFs for each coefficient set reconstruction_df <- data.frame() for (name in names(coefficient_sets)) {   coefs <- coefficient_sets[[name]]   hrf_values <- as.vector(recon_matrix %*% coefs)      df <- data.frame(     Time = eval_times,     HRF = hrf_values,     Pattern = name   )   reconstruction_df <- rbind(reconstruction_df, df) }  ggplot(reconstruction_df, aes(x = Time, y = HRF, color = Pattern)) +   geom_line(linewidth = 1.5) +   scale_color_manual(values = c(\"Early Peak\" = \"#E69F00\",                                 \"Canonical\" = \"#009E73\",                                \"Late Peak\" = \"#0072B2\",                                \"Double Peak\" = \"#D55E00\")) +   labs(title = \"Different HRF Shapes from Same Basis Set\",        subtitle = \"Varying coefficients produces diverse HRF patterns\",        x = \"Time (seconds)\",        y = \"HRF Response\") +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"interactive-visualization-building-an-hrf-step-by-step","dir":"Articles","previous_headings":"Reconstruction Matrices: From Coefficients to HRF Shapes","what":"Interactive Visualization: Building an HRF Step by Step","title":"Advanced HRF Modeling and Design","text":"","code":"# Let's build up a canonical HRF step by step canonical_coefs <- c(0.0, 0.3, 1.0, 0.4, -0.1)  # Create data for cumulative reconstruction cumulative_df <- data.frame() for (i in 1:5) {   # Zero out coefficients after position i   temp_coefs <- canonical_coefs   if (i < 5) temp_coefs[(i+1):5] <- 0      # Calculate cumulative HRF   cumulative_hrf <- as.vector(recon_matrix %*% temp_coefs)      # Store individual contribution   individual_coefs <- rep(0, 5)   individual_coefs[i] <- canonical_coefs[i]   individual_contribution <- as.vector(recon_matrix %*% individual_coefs)      df <- data.frame(     Time = rep(eval_times, 2),     Value = c(cumulative_hrf, individual_contribution),     Type = rep(c(\"Cumulative\", \"Individual\"), each = length(eval_times)),     Step = i,     Basis = paste0(\"Adding B\", i, \" (coef=\", round(canonical_coefs[i], 2), \")\")   )   cumulative_df <- rbind(cumulative_df, df) }  # Create faceted plot showing the build-up ggplot(cumulative_df, aes(x = Time, y = Value, color = Type)) +   geom_line(linewidth = 1.2) +   facet_wrap(~Basis, ncol = 5) +   scale_color_manual(values = c(\"Cumulative\" = \"black\", \"Individual\" = \"red\")) +   labs(title = \"Building an HRF: Sequential Addition of Weighted Basis Functions\",        subtitle = \"Red: individual contribution, Black: cumulative sum\",        x = \"Time (seconds)\",        y = \"Value\") +   theme_minimal() +   theme(legend.position = \"bottom\",         strip.text = element_text(size = 9)) # Show coefficient importance coef_importance <- data.frame(   Basis = paste0(\"B\", 1:5),   Coefficient = canonical_coefs,   `Absolute Value` = abs(canonical_coefs) )  ggplot(coef_importance, aes(x = Basis, y = Coefficient, fill = Coefficient > 0)) +   geom_col() +   geom_hline(yintercept = 0, linetype = \"dashed\", alpha = 0.5) +   scale_fill_manual(values = c(\"FALSE\" = \"#D55E00\", \"TRUE\" = \"#009E73\"),                     labels = c(\"Negative\", \"Positive\")) +   labs(title = \"Coefficient Values for Canonical HRF\",        subtitle = \"B3 dominates the shape, B5 provides the undershoot\",        x = \"Basis Function\",        y = \"Coefficient Value\",        fill = \"Sign\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"regressor-sets-multi-condition-experimental-designs","dir":"Articles","previous_headings":"","what":"Regressor Sets: Multi-Condition Experimental Designs","title":"Advanced HRF Modeling and Design","text":"regressor_set() function simplifies creating regressors multi-condition experiments condition shares HRF different event timings.","code":"# Simulate a 3-condition experiment set.seed(123) n_events_per_condition <- 8 total_duration <- 240  # 4 minutes  # Generate random onsets for each condition condition_A_onsets <- sort(runif(n_events_per_condition, 0, total_duration)) condition_B_onsets <- sort(runif(n_events_per_condition, 0, total_duration)) condition_C_onsets <- sort(runif(n_events_per_condition, 0, total_duration))  # Combine all onsets and create factor all_onsets <- c(condition_A_onsets, condition_B_onsets, condition_C_onsets) conditions <- factor(rep(c(\"TaskA\", \"TaskB\", \"TaskC\"), each = n_events_per_condition))  # Create regressor set reg_set <- regressor_set(onsets = all_onsets, fac = conditions, hrf = HRF_SPMG1) print(reg_set) #> $regs #> $regs[[1]] #>  #> $regs[[2]] #>  #> $regs[[3]] #>  #>  #> $levels #> [1] \"TaskA\" \"TaskB\" \"TaskC\" #>  #> attr(,\"class\") #> [1] \"RegSet\" \"list\"  # Evaluate at scan times (TR = 2s) TR <- 2 scan_times <- seq(0, total_duration, by = TR) design_matrix <- evaluate(reg_set, scan_times)  print(dim(design_matrix)) # Time points x 3 conditions #> [1] 121   3  # Visualize the design matrix design_df <- as.data.frame(design_matrix) names(design_df) <- c(\"TaskA\", \"TaskB\", \"TaskC\") design_df$Time <- scan_times  design_long <- pivot_longer(design_df, -Time, names_to = \"Condition\", values_to = \"Response\")  ggplot(design_long, aes(x = Time, y = Response, color = Condition)) +   geom_line(linewidth = 1) +   scale_color_viridis_d() +   labs(title = \"Multi-Condition fMRI Design Matrix\",        subtitle = \"Three experimental conditions with shared HRF\",        x = \"Time (seconds)\",        y = \"Predicted BOLD Response\",        color = \"Condition\") +   theme_minimal() # Add event markers onset_df <- data.frame(   Time = all_onsets,   Condition = conditions,   Marker = 1 )  ggplot(design_long, aes(x = Time, y = Response, color = Condition)) +   geom_line(linewidth = 1) +   geom_point(data = onset_df, aes(x = Time, y = -0.1, color = Condition),               size = 2, alpha = 0.7) +   scale_color_viridis_d() +   labs(title = \"Design Matrix with Event Onsets\",        subtitle = \"Points show stimulus onset times\",        x = \"Time (seconds)\",        y = \"Predicted BOLD Response\",        color = \"Condition\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/a_04_advanced_modeling.html","id":"regressor-design-complex-block-designs","dir":"Articles","previous_headings":"","what":"Regressor Design: Complex Block Designs","title":"Advanced HRF Modeling and Design","text":"complex experimental designs multiple blocks runs, regressor_design() provides higher-level interface handles block-relative timing creates design matrices directly.","code":"# Create a sampling frame for 2 blocks of 120 seconds each sframe <- sampling_frame(   blocklens = c(120, 120),  # Two 4-minute blocks (120 scans each at TR = 2s)   TR = 2                    # 2-second TR ) print(sframe) #> Sampling Frame #> ============== #>  #> Structure: #>   2 blocks #>   Total scans: 240 #>  #> Timing: #>   TR: 2 s #>   Precision: 0.1 s #>  #> Duration: #>   Total time: 480.0 s  # Generate block-relative event onsets # Block 1: Faces at 10, 50, 90; Houses at 30, 70 seconds # Block 2: Faces at 15, 55, 95; Houses at 35, 75 seconds   block_onsets <- c(10, 30, 50, 70, 90, 15, 35, 55, 75, 95) block_ids <- c(rep(1, 5), rep(2, 5)) event_conditions <- factor(c(\"Faces\", \"Houses\", \"Faces\", \"Houses\", \"Faces\",                              \"Faces\", \"Houses\", \"Faces\", \"Houses\", \"Faces\"))  # Create design matrix using regressor_design design_mat <- regressor_design(   onsets = block_onsets,   fac = event_conditions,   block = block_ids,   sframe = sframe,   hrf = HRF_SPMG1 )  print(dim(design_mat)) # Total time points across both blocks x 2 conditions #> [1] 240   2  # Convert to data frame for plotting time_points <- samples(sframe) design_plot_df <- as.data.frame(design_mat) names(design_plot_df) <- c(\"Faces\", \"Houses\") design_plot_df$Time <- time_points design_plot_df$Block <- rep(1:2, each = 120) # 120 scans per block  design_plot_long <- pivot_longer(design_plot_df, c(\"Faces\", \"Houses\"),                                  names_to = \"Condition\", values_to = \"Response\")  # Plot with block separation ggplot(design_plot_long, aes(x = Time, y = Response, color = Condition)) +   geom_line(linewidth = 1) +   geom_vline(xintercept = 240, linetype = \"dashed\", alpha = 0.7) +   scale_color_viridis_d() +   labs(title = \"Multi-Block Experimental Design\",        subtitle = \"Two blocks with different event schedules (dashed line = block boundary)\",        x = \"Time (seconds)\",        y = \"Predicted BOLD Response\",        color = \"Condition\") +   theme_minimal() # Show global vs block-relative timing timing_df <- data.frame(   Block = block_ids,   Block_Relative_Onset = block_onsets,   Global_Onset = global_onsets(sframe, block_onsets, block_ids),   Condition = event_conditions )  print(timing_df) #>    Block Block_Relative_Onset Global_Onset Condition #> 1      1                   10           10     Faces #> 2      1                   30           30    Houses #> 3      1                   50           50     Faces #> 4      1                   70           70    Houses #> 5      1                   90           90     Faces #> 6      2                   15          255     Faces #> 7      2                   35          275    Houses #> 8      2                   55          295     Faces #> 9      2                   75          315    Houses #> 10     2                   95          335     Faces"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Performance Benchmarks","text":"vignette demonstrates performance advantages fmrihrf compared R packages fMRI HRF modeling. focus common scenario: creating FIR-based design matrices event-related fMRI analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"benchmark-setup","dir":"Articles","previous_headings":"","what":"Benchmark Setup","title":"Performance Benchmarks","text":"’ll create design matrix : - 2000 trials - 1-second temporal resolution - 20-second HRF window - FIR basis 20 time points","code":"# Generate random event times set.seed(123) n_trials <- 2000 total_time <- 600  # 10 minutes onsets <- sort(runif(n_trials, min = 0, max = total_time - 20))  # Time grid dt <- 1.0 time_grid <- seq(0, total_time, by = dt)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"fmrihrf-performance","dir":"Articles","previous_headings":"","what":"fmrihrf Performance","title":"Performance Benchmarks","text":"fmrihrf package uses optimized C++ code FFT-based convolution efficient computation:","code":"# Create FIR HRF fir_hrf <- HRF_FIR  # Benchmark fmrihrf fmrihrf_time <- microbenchmark(   fmrihrf = {     reg <- regressor(       onsets = onsets,       hrf = fir_hrf,       duration = 0,       amplitude = 1     )     design_matrix <- evaluate(reg, time_grid)   },   times = 10 )  print(fmrihrf_time) #> Unit: microseconds #>     expr   min      lq     mean   median      uq      max neval #>  fmrihrf 862.4 875.544 1257.408 883.2485 921.019 4454.425    10"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"comparison-with-base-r","dir":"Articles","previous_headings":"","what":"Comparison with Base R","title":"Performance Benchmarks","text":"comparison, ’s naive base R implementation using loops:","code":"# Base R implementation create_fir_design_base <- function(onsets, time_grid, n_basis = 20) {   n_time <- length(time_grid)   design <- matrix(0, n_time, n_basis)      for (i in seq_along(onsets)) {     onset_idx <- which.min(abs(time_grid - onsets[i]))     for (j in 1:n_basis) {       idx <- onset_idx + j - 1       if (idx <= n_time) {         design[idx, j] <- design[idx, j] + 1       }     }   }   design }  # Benchmark base R base_r_time <- microbenchmark(   base_r = {     design_matrix <- create_fir_design_base(onsets, time_grid)   },   times = 10 )  print(base_r_time) #> Unit: milliseconds #>    expr      min       lq     mean   median       uq      max neval #>  base_r 7.608923 7.638127 10.47276 7.726182 10.63967 26.63748    10"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"results-summary","dir":"Articles","previous_headings":"","what":"Results Summary","title":"Performance Benchmarks","text":"","code":"# Calculate speedup fmrihrf_median <- median(fmrihrf_time$time) / 1e6  # Convert to milliseconds base_r_median <- median(base_r_time$time) / 1e6  speedup <- base_r_median / fmrihrf_median  cat(sprintf(\"fmrihrf median time: %.2f ms\\n\", fmrihrf_median)) #> fmrihrf median time: 0.88 ms cat(sprintf(\"Base R median time: %.2f ms\\n\", base_r_median)) #> Base R median time: 7.73 ms cat(sprintf(\"Speedup factor: %.1fx\\n\", speedup)) #> Speedup factor: 8.7x"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"scaling-performance","dir":"Articles","previous_headings":"","what":"Scaling Performance","title":"Performance Benchmarks","text":"Let’s examine performance scales number events: Performance scaling number events","code":"n_events_vec <- c(100, 500, 1000, 2000, 5000) times_fmrihrf <- numeric(length(n_events_vec)) times_base <- numeric(length(n_events_vec))  for (i in seq_along(n_events_vec)) {   n <- n_events_vec[i]   test_onsets <- sort(runif(n, min = 0, max = total_time - 20))      # Time fmrihrf   t1 <- microbenchmark(     {       reg <- regressor(onsets = test_onsets, hrf = fir_hrf)       evaluate(reg, time_grid)     },     times = 5   )   times_fmrihrf[i] <- median(t1$time) / 1e6      # Time base R   t2 <- microbenchmark(     create_fir_design_base(test_onsets, time_grid),     times = 5   )   times_base[i] <- median(t2$time) / 1e6 }  # Plot results plot(n_events_vec, times_base, type = \"b\", pch = 19, col = \"red\",      xlab = \"Number of Events\", ylab = \"Time (ms)\",      main = \"Performance Scaling Comparison\",      ylim = c(0, max(times_base) * 1.1)) lines(n_events_vec, times_fmrihrf, type = \"b\", pch = 19, col = \"blue\") legend(\"topleft\", legend = c(\"Base R\", \"fmrihrf\"),         col = c(\"red\", \"blue\"), lty = 1, pch = 19)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/articles/performance_benchmark.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Performance Benchmarks","text":"benchmarks demonstrate fmrihrf provides substantial performance improvements naive R implementations, particularly number events increases. C++ backend FFT-based convolution ensures efficient computation even large-scale fMRI analyses. Key advantages: - Speed: Typically 10-50x faster pure R implementations - Scalability: Performance advantage increases problem size - Memory efficiency: Optimized C++ data structures reduce memory overhead - Numerical stability: Professional-grade FFT implementation ensures accuracy","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2024). fmrihrf: fMRI Hemodynamic Response Function (HRF) Regressor Tools. R package version 0.1.0, https://bbuchsbaum.github.io/fmrihrf/.","code":"@Manual{,   title = {fmrihrf: fMRI Hemodynamic Response Function (HRF) and Regressor Tools},   author = {Bradley Buchsbaum},   year = {2024},   note = {R package version 0.1.0},   url = {https://bbuchsbaum.github.io/fmrihrf/}, }"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF-class.html","id":null,"dir":"Reference","previous_headings":"","what":"HRF Constructor Function — HRF","title":"HRF Constructor Function — HRF","text":"`HRF` function creates object representing hemodynamic response function (HRF). class constructor HRFs.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HRF Constructor Function — HRF","text":"","code":"HRF(fun, name, nbasis = 1, span = 24, param_names = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HRF Constructor Function — HRF","text":"fun function representing hemodynamic response, mapping time BOLD response. name string specifying name function. nbasis integer representing number basis functions, e.g., columnar dimension HRF. Default 1. span numeric value representing span seconds HRF. Default 24. param_names character vector containing names parameters HRF function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HRF Constructor Function — HRF","text":"HRF object specified properties.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HRF Constructor Function — HRF","text":"package provides several pre-defined HRF types can used modeling fMRI responses: **Canonical HRFs:** * `\"spmg1\"` `HRF_SPMG1`: SPM's canonical HRF (single basis function) * `\"spmg2\"` `HRF_SPMG2`: SPM canonical + temporal derivative (2 basis functions) * `\"spmg3\"` `HRF_SPMG3`: SPM canonical + temporal dispersion derivatives (3 basis functions) * `\"gaussian\"` `HRF_GAUSSIAN`: Gaussian-shaped HRF peak around 5-6s * `\"gamma\"` `HRF_GAMMA`: Gamma function-based HRF longer tail **Flexible basis sets:** * `\"bspline\"` `\"bs\"` `HRF_BSPLINE`: B-spline basis flexible HRF modeling * `\"tent\"`: Tent (triangular) basis functions flexible HRF modeling * `\"daguerre\"` `HRF_DAGUERRE`: Daguerre basis functions see complete list available HRF types details, use `list_available_hrfs()` function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HRF Constructor Function — HRF","text":"","code":"hrf <- HRF(hrf_gamma, \"gamma\", nbasis=1, param_names=c(\"shape\", \"rate\")) resp <- evaluate(hrf, seq(0, 24, by=1))  # List all available HRF types list_available_hrfs(details = TRUE) #>        name      type nbasis_default is_alias                description #> 1     spmg1    object              1    FALSE        spmg1 HRF (object)  #> 2     spmg2    object              2    FALSE        spmg2 HRF (object)  #> 3     spmg3    object              3    FALSE        spmg3 HRF (object)  #> 4     gamma    object              1    FALSE        gamma HRF (object)  #> 5  gaussian    object              1    FALSE     gaussian HRF (object)  #> 6   bspline generator              5    FALSE   bspline HRF (generator)  #> 7      tent generator              5    FALSE      tent HRF (generator)  #> 8   fourier generator              5    FALSE   fourier HRF (generator)  #> 9  daguerre generator              3    FALSE  daguerre HRF (generator)  #> 10      fir generator             12    FALSE       fir HRF (generator)  #> 11      lwu generator       variable    FALSE       lwu HRF (generator)  #> 12      gam    object              1    FALSE          gam HRF (object)  #> 13       bs generator              5     TRUE bs HRF (generator) (alias)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"collection pre-defined HRF objects common fMRI analysis scenarios. objects can used directly model specifications templates creating custom HRFs.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"","code":"HRF_GAMMA(t, shape = 6, rate = 1)  HRF_GAUSSIAN(t, mean = 6, sd = 2)  HRF_SPMG1(t, P1 = 5, P2 = 15, A1 = 0.0833)  HRF_SPMG2(t)  HRF_SPMG3(t)  HRF_BSPLINE(t)  HRF_FIR(t)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"t Numeric vector time points (seconds) evaluate HRF shape, rate Parameters gamma distribution HRF (default: shape=6, rate=1) mean, sd Parameters Gaussian HRF (default: mean=6, sd=2) P1, P2 Shape parameters SPM canonical HRF (default: P1=5, P2=15) A1 Amplitude parameter SPM canonical HRF (default: 0.0833)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"called functions, return numeric vectors matrices HRF values. used objects, HRF objects class c(\"HRF\", \"function\").","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"canonical-hrfs","dir":"Reference","previous_headings":"","what":"Canonical HRFs","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"HRF_SPMG1 SPM canonical HRF (single basis function) HRF_SPMG2 SPM canonical HRF temporal derivative (2 basis functions) HRF_SPMG3 SPM canonical HRF temporal dispersion derivatives (3 basis functions) HRF_GAMMA Gamma function-based HRF HRF_GAUSSIAN Gaussian function-based HRF","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"flexible-basis-sets","dir":"Reference","previous_headings":"","what":"Flexible Basis Sets","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"HRF_BSPLINE B-spline basis HRF (5 basis functions) HRF_FIR Finite Impulse Response (FIR) basis HRF (12 basis functions)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"creating-custom-basis-sets","dir":"Reference","previous_headings":"","what":"Creating Custom Basis Sets","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"pre-defined objects fixed numbers basis functions. create basis sets custom parameters (e.g., different numbers basis functions), use one approaches: Using getHRF(): getHRF(\"fir\", nbasis = 20) - FIR basis 20 functions getHRF(\"bspline\", nbasis = 10, span = 30) - B-spline 10 functions getHRF(\"fourier\", nbasis = 7) - Fourier basis 7 functions getHRF(\"daguerre\", nbasis = 5, scale = 3) - Daguerre basis Using generator functions directly: hrf_fir_generator(nbasis = 20, span = 30) hrf_bspline_generator(nbasis = 10, span = 30) hrf_fourier_generator(nbasis = 7, span = 24) hrf_daguerre_generator(nbasis = 5, scale = 3)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"HRF objects can : Called functions time argument: HRF_SPMG1(t) Used model specifications: hrf(condition, basis = HRF_SPMG1) Evaluated evaluate() method Combined decorators like lag_hrf() block_hrf()","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/HRF_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-defined Hemodynamic Response Function Objects — HRF_objects","text":"","code":"# Evaluate HRFs at specific time points times <- seq(0, 20, by = 0.5)  # Single basis canonical HRF canonical_response <- HRF_SPMG1(times) plot(times, canonical_response, type = \"l\", main = \"SPM Canonical HRF\")   # Multi-basis HRF with derivatives multi_response <- HRF_SPMG3(times)  # Returns 3-column matrix matplot(times, multi_response, type = \"l\", main = \"SPM HRF with Derivatives\")   # Gamma and Gaussian HRFs gamma_response <- HRF_GAMMA(times) gaussian_response <- HRF_GAUSSIAN(times)  # Compare different HRF shapes plot(times, canonical_response, type = \"l\", col = \"blue\",       main = \"HRF Comparison\", ylab = \"Response\") lines(times, gamma_response, col = \"red\") lines(times, gaussian_response, col = \"green\") legend(\"topright\", c(\"SPM Canonical\", \"Gamma\", \"Gaussian\"),         col = c(\"blue\", \"red\", \"green\"), lty = 1)   # Create custom FIR basis with 20 bins custom_fir <- getHRF(\"fir\", nbasis = 20, span = 30) fir_response <- evaluate(custom_fir, times) matplot(times, fir_response, type = \"l\", main = \"Custom FIR with 20 bins\")   # Create custom B-spline basis   custom_bspline <- hrf_bspline_generator(nbasis = 8, span = 25) bspline_response <- evaluate(custom_bspline, times) matplot(times, bspline_response, type = \"l\", main = \"Custom B-spline with 8 basis functions\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/Reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Constructor for Regressor Objects — Reg","title":"Internal Constructor for Regressor Objects — Reg","text":"Internal Constructor Regressor Objects","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/Reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Constructor for Regressor Objects — Reg","text":"","code":"Reg(   onsets,   hrf = HRF_SPMG1,   duration = 0,   amplitude = 1,   span = 40,   summate = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/Reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Constructor for Regressor Objects — Reg","text":"S3 object class `Reg` (`list`) components:   * `onsets`: Numeric vector event onset times (seconds).   * `hrf`: object class `HRF` used convolution.   * `duration`: Numeric vector event durations (seconds).   * `amplitude`: Numeric vector event amplitudes/scaling factors.   * `span`: Numeric scalar indicating HRF span (seconds).   * `summate`: Logical indicating overlapping HRF responses summate.   * `filtered_all`: Logical attribute set `TRUE` events     removed due zero `NA` amplitudes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/acquisition_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fMRI Acquisition Onset Times — acquisition_onsets","title":"Get fMRI Acquisition Onset Times — acquisition_onsets","text":"Calculate onset time seconds fMRI volume acquisition start experiment.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/acquisition_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fMRI Acquisition Onset Times — acquisition_onsets","text":"","code":"acquisition_onsets(x, ...)  # S3 method for class 'sampling_frame' acquisition_onsets(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/acquisition_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fMRI Acquisition Onset Times — acquisition_onsets","text":"x sampling_frame object ... Additional arguments (extensibility)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/acquisition_onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fMRI Acquisition Onset Times — acquisition_onsets","text":"Numeric vector acquisition onset times seconds","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/acquisition_onsets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get fMRI Acquisition Onset Times — acquisition_onsets","text":"Returns temporal onset brain volume acquisition, accounting TR, start_time, run structure. essentially convenience wrapper around samples(x, global = TRUE) provides clearer semantic meaning common use case getting acquisition times. Note: onset times include start_time offset (default TR/2), first acquisition typically start 0.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/acquisition_onsets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get fMRI Acquisition Onset Times — acquisition_onsets","text":"","code":"# Single block with default start_time (TR/2 = 1) sf <- sampling_frame(blocklens = 100, TR = 2) onsets <- acquisition_onsets(sf) head(onsets)  # Returns: 1, 3, 5, 7, 9, 11, ... #> [1]  1  3  5  7  9 11  # Multiple blocks with same TR sf2 <- sampling_frame(blocklens = c(100, 120), TR = 2) onsets2 <- acquisition_onsets(sf2) # First block: 1, 3, 5, ..., 199 # Second block: 201, 203, 205, ..., 439  # Variable TR per block sf3 <- sampling_frame(blocklens = c(100, 100), TR = c(2, 1.5)) onsets3 <- acquisition_onsets(sf3) # First block: 1, 3, 5, ..., 199 (TR=2) # Second block: 200.75, 202.25, 203.75, ... (TR=1.5, start_time=0.75)  # Custom start times sf4 <- sampling_frame(blocklens = c(50, 50), TR = 2, start_time = 0) onsets4 <- acquisition_onsets(sf4) head(onsets4)  # Returns: 0, 2, 4, 6, 8, 10, ... #> [1]  0  2  4  6  8 10"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/amplitudes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get amplitudes from an object — amplitudes","title":"Get amplitudes from an object — amplitudes","text":"Generic accessor returning event amplitudes scaling factors.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/amplitudes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get amplitudes from an object — amplitudes","text":"","code":"amplitudes(x, ...)  # S3 method for class 'Reg' amplitudes(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/amplitudes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get amplitudes from an object — amplitudes","text":"x Object containing amplitude information ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/amplitudes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get amplitudes from an object — amplitudes","text":"Numeric vector amplitudes","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/as_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn any function into an HRF object — as_hrf","title":"Turn any function into an HRF object — as_hrf","text":"core constructor creating HRF objects refactored system. takes function `f(t)` attaches standard HRF attributes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/as_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn any function into an HRF object — as_hrf","text":"","code":"as_hrf(   f,   name = deparse(substitute(f)),   nbasis = 1L,   span = 24,   params = list() )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/as_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn any function into an HRF object — as_hrf","text":"f function turned HRF object. must accept single argument `t` (time). name name HRF object. Defaults deparsed name `f`. nbasis number basis functions represented `f`. Must >= 1. Defaults 1L. span nominal time span (duration seconds) HRF. Must positive. Defaults 24. params named list parameters associated HRF function `f`. Defaults empty list.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/as_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn any function into an HRF object — as_hrf","text":"new HRF object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/bind_basis.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind HRFs into a Basis Set — bind_basis","title":"Bind HRFs into a Basis Set — bind_basis","text":"Combines multiple HRF objects single multi-basis HRF object. resulting function evaluates input HRF time `t` returns results column-bound together.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/bind_basis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind HRFs into a Basis Set — bind_basis","text":"","code":"bind_basis(...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/bind_basis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind HRFs into a Basis Set — bind_basis","text":"... One HRF objects created `as_hrf` HRF constructors/decorators.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/bind_basis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind HRFs into a Basis Set — bind_basis","text":"new HRF object representing combined basis set.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/block_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Blocked HRF Object — block_hrf","title":"Create a Blocked HRF Object — block_hrf","text":"Creates new HRF object representing response sustained (blocked) stimulus convolving input HRF boxcar function given width.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/block_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Blocked HRF Object — block_hrf","text":"","code":"block_hrf(   hrf,   width,   precision = 0.1,   half_life = Inf,   summate = TRUE,   normalize = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/block_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Blocked HRF Object — block_hrf","text":"hrf HRF object (class `HRF`) block. width width block seconds. precision sampling precision seconds used internal convolution (default: 0.1). half_life half-life optional exponential decay applied block (default: Inf, meaning decay). summate Logical; TRUE (default), responses time point within block summed. FALSE, maximum response time point taken. normalize Logical; TRUE, resulting blocked HRF scaled peak value 1 (default: FALSE).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/block_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Blocked HRF Object — block_hrf","text":"new HRF object representing blocked function.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/block_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Blocked HRF Object — block_hrf","text":"","code":"blocked_spmg1 <- block_hrf(HRF_SPMG1, width = 5) t_vals <- seq(0, 30, by = 0.5) plot(t_vals, HRF_SPMG1(t_vals), type = 'l', col = \"blue\", ylab = \"Response\", xlab = \"Time\") lines(t_vals, blocked_spmg1(t_vals), col = \"red\") legend(\"topright\", legend = c(\"Original\", \"Blocked (width=5)\"), col = c(\"blue\", \"red\"), lty = 1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blockids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get block identifiers — blockids","title":"Get block identifiers — blockids","text":"Generic accessor returning block indices sample onset.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blockids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get block identifiers — blockids","text":"","code":"blockids(x, ...)  # S3 method for class 'sampling_frame' blockids(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blockids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get block identifiers — blockids","text":"x Object containing block structure ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blockids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get block identifiers — blockids","text":"Integer vector block ids","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blocklens.html","id":null,"dir":"Reference","previous_headings":"","what":"Get block lengths — blocklens","title":"Get block lengths — blocklens","text":"Generic accessor returning number scans block sampling frame similar object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blocklens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get block lengths — blocklens","text":"","code":"blocklens(x, ...)  # S3 method for class 'sampling_frame' blocklens(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blocklens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get block lengths — blocklens","text":"x Object containing block length information ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/blocklens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get block lengths — blocklens","text":"Numeric vector block lengths","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.HRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Default derivative method for HRF objects — deriv.HRF","title":"Default derivative method for HRF objects — deriv.HRF","text":"Uses numerical differentiation via numDeriv::grad analytic derivatives available specific HRF type.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.HRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default derivative method for HRF objects — deriv.HRF","text":"","code":"# S3 method for class 'HRF' deriv(x, t, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.HRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default derivative method for HRF objects — deriv.HRF","text":"x HRF object t Numeric vector time points evaluate derivative ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.HRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default derivative method for HRF objects — deriv.HRF","text":"Numeric vector matrix derivative values","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG1_HRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivative method for SPMG1 HRF — deriv.SPMG1_HRF","title":"Derivative method for SPMG1 HRF — deriv.SPMG1_HRF","text":"Uses analytic derivative formula SPM canonical HRF.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG1_HRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivative method for SPMG1 HRF — deriv.SPMG1_HRF","text":"","code":"# S3 method for class 'SPMG1_HRF' deriv(x, t, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG1_HRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivative method for SPMG1 HRF — deriv.SPMG1_HRF","text":"x SPMG1_HRF object t Numeric vector time points evaluate derivative ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG1_HRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivative method for SPMG1 HRF — deriv.SPMG1_HRF","text":"Numeric vector derivative values","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG2_HRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivative method for SPMG2 HRF — deriv.SPMG2_HRF","title":"Derivative method for SPMG2 HRF — deriv.SPMG2_HRF","text":"Returns derivatives canonical HRF temporal derivative. first column contains derivative canonical HRF, second column contains second derivative (derivative temporal derivative).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG2_HRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivative method for SPMG2 HRF — deriv.SPMG2_HRF","text":"","code":"# S3 method for class 'SPMG2_HRF' deriv(x, t, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG2_HRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivative method for SPMG2 HRF — deriv.SPMG2_HRF","text":"x SPMG2_HRF object t Numeric vector time points evaluate derivative ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG2_HRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivative method for SPMG2 HRF — deriv.SPMG2_HRF","text":"Matrix 2 columns derivative values","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG3_HRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivative method for SPMG3 HRF — deriv.SPMG3_HRF","title":"Derivative method for SPMG3 HRF — deriv.SPMG3_HRF","text":"Returns derivatives canonical HRF two derivatives. Since SPMG3 already includes first second derivatives basis functions, method returns derivatives (1st, 2nd, 3rd derivatives original HRF).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG3_HRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivative method for SPMG3 HRF — deriv.SPMG3_HRF","text":"","code":"# S3 method for class 'SPMG3_HRF' deriv(x, t, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG3_HRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivative method for SPMG3 HRF — deriv.SPMG3_HRF","text":"x SPMG3_HRF object t Numeric vector time points evaluate derivative ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.SPMG3_HRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivative method for SPMG3 HRF — deriv.SPMG3_HRF","text":"Matrix 3 columns derivative values","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute derivatives of HRF functions — deriv","title":"Compute derivatives of HRF functions — deriv","text":"Calculates derivative Hemodynamic Response Function (HRF) specified time points. useful : Understanding HRF dynamics rate change Creating temporal derivative regressors fMRI models Analyzing HRF shape characteristics Implementing advanced HRF basis sets","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute derivatives of HRF functions — deriv","text":"","code":"deriv(x, t, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute derivatives of HRF functions — deriv","text":"x HRF object t Numeric vector time points evaluate derivative ... Additional arguments passed specific methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute derivatives of HRF functions — deriv","text":"Numeric vector matrix derivative values specified time   points. multi-basis HRFs, returns matrix one column per basis   function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute derivatives of HRF functions — deriv","text":"derivative computation method depends HRF type: Analytic derivatives used available (e.g., SPMG1, SPMG2,     SPMG3) Numeric finite-difference approximation used fallback default implementation uses numDeriv::grad numerical differentiation analytic derivatives available.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/deriv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute derivatives of HRF functions — deriv","text":"","code":"# Compute derivative of SPM canonical HRF t <- seq(0, 20, by = 0.1) hrf_deriv <- deriv(HRF_SPMG1, t)  # Plot HRF and its derivative hrf_vals <- evaluate(HRF_SPMG1, t) plot(t, hrf_vals, type = \"l\", col = \"black\",      ylab = \"Response\", xlab = \"Time (s)\") lines(t, hrf_deriv, col = \"red\", lty = 2) legend(\"topright\", c(\"HRF\", \"Derivative\"),        col = c(\"black\", \"red\"), lty = c(1, 2))   # For multi-basis HRFs, returns matrix deriv_matrix <- deriv(HRF_SPMG3, t) # Returns derivatives for all 3 basis functions"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/durations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get durations of an object — durations","title":"Get durations of an object — durations","text":"Get durations object","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/durations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get durations of an object — durations","text":"","code":"durations(x, ...)  # S3 method for class 'Reg' durations(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/durations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get durations of an object — durations","text":"x object get durations ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/durations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get durations of an object — durations","text":"numeric vector durations","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/empirical_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an Empirical Hemodynamic Response Function — empirical_hrf","title":"Generate an Empirical Hemodynamic Response Function — empirical_hrf","text":"`empirical_hrf` generates empirical HRF using provided time points values.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/empirical_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an Empirical Hemodynamic Response Function — empirical_hrf","text":"","code":"empirical_hrf(t, y, name = \"empirical_hrf\")  gen_empirical_hrf(...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/empirical_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an Empirical Hemodynamic Response Function — empirical_hrf","text":"t Time points. y Values HRF time `t[]`. name Name generated HRF.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/empirical_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an Empirical Hemodynamic Response Function — empirical_hrf","text":"instance type `HRF`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/empirical_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an Empirical Hemodynamic Response Function — empirical_hrf","text":"","code":"# Create empirical HRF from data points t_points <- seq(0, 20, by = 1) y_values <- c(0, 0.1, 0.5, 0.9, 1.0, 0.8, 0.5, 0.2, 0, -0.1, -0.1,                0, 0, 0, 0, 0, 0, 0, 0, 0, 0) emp_hrf <- empirical_hrf(t_points, y_values)  # Evaluate at new time points new_times <- seq(0, 25, by = 0.1) response <- evaluate(emp_hrf, new_times)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.HRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an HRF Object — evaluate.HRF","title":"Evaluate an HRF Object — evaluate.HRF","text":"function evaluates hemodynamic response function (HRF) object given set time points (grid) parameters. handles point evaluation (duration=0) block evaluation (duration > 0).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.HRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an HRF Object — evaluate.HRF","text":"","code":"# S3 method for class 'HRF' evaluate(   x,   grid,   amplitude = 1,   duration = 0,   precision = 0.2,   summate = TRUE,   normalize = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.HRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an HRF Object — evaluate.HRF","text":"x HRF object (inherits `HRF` `function`). grid numeric vector time points evaluate HRF. amplitude scaling value event (default: 1). duration duration event (seconds). > 0, HRF evaluated duration (default: 0). precision temporal resolution evaluating responses duration > 0 (default: 0.2). summate Logical; whether HRF response accumulate duration (default: TRUE). FALSE, maximum response within duration window taken (currently supported single-basis HRFs). normalize Logical; scale output peak absolute value 1 (default: FALSE). Applied ** amplitude scaling duration processing. ... Additional arguments (unused).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.HRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an HRF Object — evaluate.HRF","text":"numeric vector matrix HRF values specified time points.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.HRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an HRF Object — evaluate.HRF","text":"","code":"# Evaluate canonical HRF at specific times times <- seq(0, 20, by = 0.5) response <- evaluate(HRF_SPMG1, times)  # Evaluate with amplitude scaling response_scaled <- evaluate(HRF_SPMG1, times, amplitude = 2)  # Evaluate with duration (block design) response_block <- evaluate(HRF_SPMG1, times, duration = 5, summate = TRUE)  # Multi-basis HRF evaluation response_multi <- evaluate(HRF_SPMG3, times)  # Returns 3-column matrix"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a regressor object over a time grid — evaluate","title":"Evaluate a regressor object over a time grid — evaluate","text":"Generic function evaluate regressor object specified time grid. Different types regressors may different evaluation methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a regressor object over a time grid — evaluate","text":"","code":"evaluate(x, grid, ...)  # S3 method for class 'Reg' evaluate(   x,   grid,   precision = 0.33,   method = c(\"conv\", \"fft\", \"Rconv\", \"loop\"),   sparse = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a regressor object over a time grid — evaluate","text":"x `Reg` object (object inheriting , like `regressor`). grid Numeric vector specifying time points (seconds) evaluation. ... Additional arguments passed (e.g., `evaluate.HRF` loop method). precision Numeric sampling precision internal HRF evaluation convolution (seconds). method evaluation method: conv (Default) Uses C++ direct convolution (`evaluate_regressor_convolution`). Generally safer predictable. fft Uses fast C++ FFT convolution (`evaluate_regressor_fast`). Can faster may fail fine precision wide grids.     Extremely fine `precision` wide `grid` ranges may trigger internal FFT size exceeding ~1e7, results error. Rconv Uses R-based convolution (`stats::convolve`). Requires constant event durations regular sampling grid. Can faster R loop many events meeting criteria. loop Uses pure R implementation involving looping onsets. Can slower, especially many onsets. sparse Logical indicating whether return sparse matrix (Matrix package). Default FALSE.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a regressor object over a time grid — evaluate","text":"numeric vector matrix containing evaluated regressor values","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/evaluate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a regressor object over a time grid — evaluate","text":"","code":"# Create a regressor reg <- regressor(onsets = c(10, 30, 50), hrf = HRF_SPMG1)  # Evaluate at specific time points times <- seq(0, 80, by = 0.1) response <- evaluate(reg, times)  # Plot the response plot(times, response, type = \"l\", xlab = \"Time (s)\", ylab = \"Response\")  # Create a regressor reg <- regressor(onsets = c(10, 30, 50), hrf = HRF_SPMG1)  # Evaluate with default method (conv) times <- seq(0, 80, by = 0.5) response <- evaluate(reg, times)  # Try different evaluation methods response_loop <- evaluate(reg, times, method = \"loop\")  # With higher precision response_precise <- evaluate(reg, times, precision = 0.1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/fmrihrf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fmrihrf: Hemodynamic Response Function Modeling for Functional Magnetic Resonance Imaging — fmrihrf-package","title":"fmrihrf: Hemodynamic Response Function Modeling for Functional Magnetic Resonance Imaging — fmrihrf-package","text":"Creates, manipulates, evaluates hemodynamic response functions event-related regressors functional magnetic resonance imaging data analysis. Supports multiple basis sets including SPM canonical, gamma, Gaussian, B-spline, Fourier bases. Features decorators time-shifting blocking, efficient convolution algorithms regressor construction.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/fmrihrf-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fmrihrf: Hemodynamic Response Function Modeling for Functional Magnetic Resonance Imaging — fmrihrf-package","text":"fmrihrf package provides tools creating, manipulating, evaluating Hemodynamic Response Functions (HRFs) event-related regressors fMRI data analysis.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/fmrihrf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fmrihrf: Hemodynamic Response Function Modeling for Functional Magnetic Resonance Imaging — fmrihrf-package","text":"Maintainer: Bradley Buchsbaum brad.buchsbaum@gmail.com","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an HRF Instance using Decorators — gen_hrf","title":"Construct an HRF Instance using Decorators — gen_hrf","text":"`gen_hrf` takes base HRF function object applies optional lag, blocking, normalization decorators based arguments.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an HRF Instance using Decorators — gen_hrf","text":"","code":"gen_hrf(   hrf,   lag = 0,   width = 0,   precision = 0.1,   half_life = Inf,   summate = TRUE,   normalize = FALSE,   name = NULL,   span = NULL,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an HRF Instance using Decorators — gen_hrf","text":"hrf function `f(t)` existing `HRF` object. lag Optional lag seconds. non-zero, applies `lag_hrf`. width Optional block width seconds. non-zero, applies `block_hrf`. precision Sampling precision block convolution (passed `block_hrf`). Default 0.1. half_life Half-life decay parameter exponential decay seconds (passed `block_hrf`). Default Inf (decay). summate Whether summate within blocks (passed `block_hrf`). Default TRUE. normalize TRUE, applies `normalise_hrf` end. Default FALSE. name Optional name *final* HRF object. NULL (default), name generated based base HRF applied decorators. span Optional span *final* HRF object. NULL (default), span determined base HRF decorators. ... Extra arguments passed *base* HRF function `hrf` function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an HRF Instance using Decorators — gen_hrf","text":"final `HRF` object, potentially modified decorators.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an HRF Instance using Decorators — gen_hrf","text":"","code":"# Lagged SPMG1 grf_lag <- gen_hrf(HRF_SPMG1, lag=3) # Blocked Gaussian grf_block <- gen_hrf(hrf_gaussian, width=5, precision=0.2) # Lagged and Blocked, then Normalized grf_both_norm <- gen_hrf(HRF_SPMG1, lag=2, width=4, normalize=TRUE)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_blocked.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Blocked HRF Function — gen_hrf_blocked","title":"Generate a Blocked HRF Function — gen_hrf_blocked","text":"`gen_hrf_blocked` function creates blocked HRF convolving input HRF boxcar function. can used model block designs fMRI analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_blocked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Blocked HRF Function — gen_hrf_blocked","text":"","code":"gen_hrf_blocked(   hrf = hrf_gaussian,   width = 5,   precision = 0.1,   half_life = Inf,   summate = TRUE,   normalize = FALSE,   ... )  hrf_blocked(   hrf = hrf_gaussian,   width = 5,   precision = 0.1,   half_life = Inf,   summate = TRUE,   normalize = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_blocked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Blocked HRF Function — gen_hrf_blocked","text":"hrf function representing hemodynamic response function. Default `hrf_gaussian`. width numeric value specifying width block seconds. Default 5. precision numeric value specifying sampling resolution seconds. Default 0.1. half_life numeric value specifying half-life exponential decay function, used model response attenuation. Default `Inf`, means decay. summate logical value indicating whether allow impulse response function \"add\" . Default `TRUE`. normalize logical value indicating whether rescale output peak output 1. Default `FALSE`. ... Extra arguments passed HRF function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_blocked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Blocked HRF Function — gen_hrf_blocked","text":"function representing blocked HRF. function representing blocked HRF.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_blocked.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate a Blocked HRF Function — gen_hrf_blocked","text":"hrf_blocked(): alias gen_hrf_blocked","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_lagged.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Lagged HRF Function — gen_hrf_lagged","title":"Generate a Lagged HRF Function — gen_hrf_lagged","text":"`gen_hrf_lagged` function takes HRF function applies specified lag . can useful modeling time-delayed hemodynamic responses.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_lagged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Lagged HRF Function — gen_hrf_lagged","text":"","code":"gen_hrf_lagged(hrf, lag = 2, normalize = FALSE, ...)  hrf_lagged(hrf, lag = 2, normalize = FALSE, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_lagged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Lagged HRF Function — gen_hrf_lagged","text":"hrf function representing underlying HRF shifted. lag numeric value specifying lag delay seconds apply HRF. can also vector lags, case function returns HRF set. normalize logical value indicating whether rescale output maximum absolute value 1. Defaults `FALSE`. ... Extra arguments supplied `hrf` function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_lagged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Lagged HRF Function — gen_hrf_lagged","text":"function representing lagged HRF. `lag` vector lags, function returns HRF set. lagged hrf function","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_lagged.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate a Lagged HRF Function — gen_hrf_lagged","text":"hrf_lagged(): alias gen_hrf_lagged","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/gen_hrf_lagged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Lagged HRF Function — gen_hrf_lagged","text":"","code":"# \\donttest{ hrf_lag5 <- gen_hrf_lagged(HRF_SPMG1, lag=5) hrf_lag5(0:20) #>  [1] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  [7] 0.030644357 0.360749730 1.007784768 1.562306838 1.753945621 1.605440375 #> [13] 1.276104046 0.914165872 0.603787442 0.372395071 0.215170462 0.115290241 #> [19] 0.055163173 0.020765904 0.002277497 # }"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/getHRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Get HRF by Name — getHRF","title":"Get HRF by Name — getHRF","text":"Retrieves HRF name registry optionally applies decorators. provides unified interface creating pre-defined HRF objects custom basis sets specified parameters.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/getHRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get HRF by Name — getHRF","text":"","code":"getHRF(   name = \"spmg1\",   nbasis = 5,   span = 24,   lag = 0,   width = 0,   summate = TRUE,   normalize = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/getHRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get HRF by Name — getHRF","text":"name Character string specifying HRF type. Options include: \"spmg1\", \"spmg2\", \"spmg3\" - SPM canonical HRFs \"gamma\", \"gaussian\" - Simple parametric HRFs \"fir\" - Finite Impulse Response basis \"bspline\" \"bs\" - B-spline basis \"fourier\" - Fourier basis \"daguerre\" - Daguerre spherical basis \"tent\" - Tent (linear spline) basis nbasis Number basis functions (basis set types) span Temporal window seconds (default: 24) lag Time lag seconds apply (default: 0) width Block width block designs (default: 0) summate Whether sum responses block designs (default: TRUE) normalize Whether normalize HRF (default: FALSE) ... Additional arguments passed generator functions (e.g., scale daguerre)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/getHRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get HRF by Name — getHRF","text":"HRF object","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/getHRF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get HRF by Name — getHRF","text":"single HRF types (spmg1, gamma, gaussian), function returns pre-defined objects. basis set types (fir, bspline, fourier, daguerre), calls appropriate generator function specified parameters.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/getHRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get HRF by Name — getHRF","text":"","code":"# Get pre-defined canonical HRF canonical <- getHRF(\"spmg1\")  # Create custom FIR basis with 20 bins fir20 <- getHRF(\"fir\", nbasis = 20, span = 30)  # Create B-spline basis with lag bs_lag <- getHRF(\"bspline\", nbasis = 8, lag = 2)  # Create blocked Gaussian HRF block_gauss <- getHRF(\"gaussian\", width = 5)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/global_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert onsets to global timing — global_onsets","title":"Convert onsets to global timing — global_onsets","text":"Generic accessor converting block-wise onsets global onsets.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/global_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert onsets to global timing — global_onsets","text":"","code":"global_onsets(x, ...)  # S3 method for class 'sampling_frame' global_onsets(x, onsets, blockids, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/global_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert onsets to global timing — global_onsets","text":"x Object describing sampling frame ... Additional arguments passed methods onsets Numeric vector onset times within blocks blockids Integer vector identifying block onset. Values must whole numbers NAs.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/global_onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert onsets to global timing — global_onsets","text":"Numeric vector global onset times","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_basis_lwu.html","id":null,"dir":"Reference","previous_headings":"","what":"LWU HRF Basis for Taylor Expansion — hrf_basis_lwu","title":"LWU HRF Basis for Taylor Expansion — hrf_basis_lwu","text":"Constructs basis set Lag-Width-Undershoot (LWU) HRF model, intended Taylor expansion-based fitting. basis consists LWU HRF evaluated given expansion point theta0, partial derivatives respect parameters (tau, sigma, rho).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_basis_lwu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LWU HRF Basis for Taylor Expansion — hrf_basis_lwu","text":"","code":"hrf_basis_lwu(theta0, t, normalize_primary = \"none\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_basis_lwu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LWU HRF Basis for Taylor Expansion — hrf_basis_lwu","text":"theta0 numeric vector length 3 specifying expansion point c(tau0, sigma0, rho0) LWU parameters. t numeric vector time points (seconds) evaluate basis. normalize_primary Character string, one \"none\" \"height\". \"height\", primary HRF column (h0(t)) normalized peak absolute value 1. Taylor expansion fitting described Fit_LRU.md, typically \"none\" scaling absorbed beta coefficient. Default \"none\".","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_basis_lwu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LWU HRF Basis for Taylor Expansion — hrf_basis_lwu","text":"numeric matrix dimension length(t) x 4. Columns :   \\describe     \\item\\codeh0LWU HRF evaluated \\codetheta0, \\eqnh(t; \\\\tau_0, \\\\sigma_0, \\\\rho_0)     \\item\\coded_tauPartial derivative \\eqn\\\\partial h / \\\\partial \\\\tau evaluated \\codetheta0     \\item\\coded_sigmaPartial derivative \\eqn\\\\partial h / \\\\partial \\\\sigma evaluated \\codetheta0     \\item\\coded_rhoPartial derivative \\eqn\\\\partial h / \\\\partial \\\\rho evaluated \\codetheta0","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_basis_lwu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LWU HRF Basis for Taylor Expansion — hrf_basis_lwu","text":"","code":"t_points <- seq(0, 30, by = 0.5) theta0_default <- c(tau = 6, sigma = 1, rho = 0.35)  # Generate the basis set lwu_basis <- hrf_basis_lwu(theta0_default, t_points) dim(lwu_basis) # Should be length(t_points) x 4 #> [1] 61  4 head(lwu_basis) #>                 h0         d_tau       d_sigma         d_rho #> [1,] -1.289099e-06  3.984647e-06 -2.390788e-05 -3.726653e-06 #> [2,] -5.656107e-06  1.587675e-05 -8.732212e-05 -1.693161e-05 #> [3,] -2.069270e-05  4.813840e-05 -2.406920e-04 -6.976958e-05 #> [4,] -5.119678e-05  5.142627e-05 -2.314182e-04 -2.607488e-04 #> [5,]  2.612342e-05 -6.168367e-04  2.467347e-03 -8.838263e-04 #> [6,]  1.236518e-03 -5.613114e-03  1.964590e-02 -2.717065e-03  # Plot the basis functions matplot(t_points, lwu_basis, type = \"l\", lty = 1,         main = \"LWU HRF Basis Functions\", ylab = \"Value\", xlab = \"Time (s)\") legend(\"topright\", colnames(lwu_basis), col = 1:4, lty = 1, cex = 0.8)   # Example with primary HRF normalization (not typical for Taylor fitting step) lwu_basis_norm_h0 <- hrf_basis_lwu(theta0_default, t_points, normalize_primary = \"height\") plot(t_points, lwu_basis_norm_h0[,1], type=\"l\", main=\"Normalized h0 in Basis\")  max(abs(lwu_basis_norm_h0[,1])) # Should be 1 #> [1] 1"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline.html","id":null,"dir":"Reference","previous_headings":"","what":"B-spline HRF (hemodynamic response function) — hrf_bspline","title":"B-spline HRF (hemodynamic response function) — hrf_bspline","text":"`hrf_bspline` function computes B-spline representation HRF (hemodynamic response function) given time points `t`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"B-spline HRF (hemodynamic response function) — hrf_bspline","text":"","code":"hrf_bspline(t, span = 24, N = 5, degree = 3, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"B-spline HRF (hemodynamic response function) — hrf_bspline","text":"t vector time points. span numeric value representing temporal window basis set spans. Default value 20. N integer representing number basis functions. Default value 5. degree integer representing degree spline. Default value 3. ... Additional arguments passed `splines::bs`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"B-spline HRF (hemodynamic response function) — hrf_bspline","text":"matrix representing B-spline basis HRF given time points `t`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"B-spline HRF (hemodynamic response function) — hrf_bspline","text":"","code":"# Compute the B-spline HRF representation for time points from 0 to 20 with 0.5 increments hrfb <- hrf_bspline(seq(0, 20, by = .5), N = 4, degree = 2)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create B-spline HRF Basis Set — hrf_bspline_generator","title":"Create B-spline HRF Basis Set — hrf_bspline_generator","text":"Generates HRF object using B-spline basis functions custom parameters. generator function creates HRF objects variable numbers basis functions, unlike pre-defined HRF_BSPLINE 5 functions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create B-spline HRF Basis Set — hrf_bspline_generator","text":"","code":"hrf_bspline_generator(nbasis = 5, span = 24)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create B-spline HRF Basis Set — hrf_bspline_generator","text":"nbasis Number basis functions (default: 5) span Temporal window seconds (default: 24)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create B-spline HRF Basis Set — hrf_bspline_generator","text":"HRF object class c(\"BSpline_HRF\", \"HRF\", \"function\")","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_bspline_generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create B-spline HRF Basis Set — hrf_bspline_generator","text":"","code":"# Create B-spline basis with 10 functions custom_bs <- hrf_bspline_generator(nbasis = 10) t <- seq(0, 24, by = 0.1) response <- evaluate(custom_bs, t) matplot(t, response, type = \"l\", main = \"B-spline HRF with 10 basis functions\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_daguerre_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","title":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","text":"Generates HRF object using Daguerre spherical basis functions custom parameters. orthogonal polynomials naturally decay zero.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_daguerre_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","text":"","code":"hrf_daguerre_generator(nbasis = 3, scale = 4)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_daguerre_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","text":"nbasis Number basis functions (default: 3) scale Scale parameter time axis (default: 4)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_daguerre_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","text":"HRF object class c(\"Daguerre_HRF\", \"HRF\", \"function\")","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_daguerre_generator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","text":"Daguerre basis functions orthogonal polynomials [0,Inf) respect weight function w(x) = x^2 * exp(-x). particularly useful modeling hemodynamic responses naturally decay zero can capture various response shapes parameters.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_daguerre_generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Daguerre HRF Basis Set — hrf_daguerre_generator","text":"","code":"# Create Daguerre basis with 5 functions custom_dag <- hrf_daguerre_generator(nbasis = 5, scale = 3) t <- seq(0, 24, by = 0.1) response <- evaluate(custom_dag, t) matplot(t, response, type = \"l\", main = \"Daguerre HRF with 5 basis functions\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fir_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create FIR HRF Basis Set — hrf_fir_generator","title":"Create FIR HRF Basis Set — hrf_fir_generator","text":"Generates HRF object using Finite Impulse Response (FIR) basis functions custom parameters. basis function represents time bin value 1 bin 0 elsewhere.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fir_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create FIR HRF Basis Set — hrf_fir_generator","text":"","code":"hrf_fir_generator(nbasis = 12, span = 24)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fir_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create FIR HRF Basis Set — hrf_fir_generator","text":"nbasis Number time bins (default: 12) span Temporal window seconds (default: 24)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fir_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create FIR HRF Basis Set — hrf_fir_generator","text":"HRF object class c(\"FIR_HRF\", \"HRF\", \"function\")","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fir_generator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create FIR HRF Basis Set — hrf_fir_generator","text":"FIR basis divides time window nbasis equal bins. basis function indicator function corresponding bin. provides maximum flexibility requires parameters smoother basis sets like B-splines.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fir_generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create FIR HRF Basis Set — hrf_fir_generator","text":"","code":"# Create FIR basis with 20 bins over 30 seconds custom_fir <- hrf_fir_generator(nbasis = 20, span = 30) t <- seq(0, 30, by = 0.1) response <- evaluate(custom_fir, t) matplot(t, response, type = \"l\", main = \"FIR HRF with 20 time bins\")   # Compare to default FIR with 12 bins default_fir <- HRF_FIR response_default <- evaluate(default_fir, t[1:241])  # 24 seconds matplot(t[1:241], response_default, type = \"l\",          main = \"Default FIR HRF (12 bins over 24s)\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Fourier basis for HRF modeling — hrf_fourier","title":"Fourier basis for HRF modeling — hrf_fourier","text":"Generates set Fourier basis functions (sine cosine pairs) given span.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fourier basis for HRF modeling — hrf_fourier","text":"","code":"hrf_fourier(t, span = 24, nbasis = 5)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fourier basis for HRF modeling — hrf_fourier","text":"t vector time points. span temporal window basis functions span (default: 24). nbasis number basis functions (default: 5). even full sine-cosine pairs.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fourier basis for HRF modeling — hrf_fourier","text":"matrix Fourier basis functions nbasis columns.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Fourier HRF Basis Set — hrf_fourier_generator","title":"Create Fourier HRF Basis Set — hrf_fourier_generator","text":"Generates HRF object using Fourier basis functions (sine cosine pairs) custom parameters.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Fourier HRF Basis Set — hrf_fourier_generator","text":"","code":"hrf_fourier_generator(nbasis = 5, span = 24)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Fourier HRF Basis Set — hrf_fourier_generator","text":"nbasis Number basis functions (default: 5). even complete sine-cosine pairs. span Temporal window seconds (default: 24)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Fourier HRF Basis Set — hrf_fourier_generator","text":"HRF object class c(\"Fourier_HRF\", \"HRF\", \"function\")","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier_generator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Fourier HRF Basis Set — hrf_fourier_generator","text":"Fourier basis uses alternating sine cosine functions increasing frequencies. provides smooth, periodic basis set can capture oscillatory components HRF.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_fourier_generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Fourier HRF Basis Set — hrf_fourier_generator","text":"","code":"# Create Fourier basis with 8 functions custom_fourier <- hrf_fourier_generator(nbasis = 8) t <- seq(0, 24, by = 0.1) response <- evaluate(custom_fourier, t) matplot(t, response, type = \"l\", main = \"Fourier HRF with 8 basis functions\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_from_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine HRF Basis with Coefficients — hrf_from_coefficients","title":"Combine HRF Basis with Coefficients — hrf_from_coefficients","text":"Create new HRF linearly weighting basis functions existing HRF. Useful coefficients estimated FIR/bspline/SPMG3 basis one wants single functional HRF.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_from_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine HRF Basis with Coefficients — hrf_from_coefficients","text":"","code":"hrf_from_coefficients(hrf, h, ...)  # S3 method for class 'HRF' hrf_from_coefficients(hrf, h, name = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_from_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine HRF Basis with Coefficients — hrf_from_coefficients","text":"hrf object class `HRF`. h Numeric vector length `nbasis(hrf)` giving weights. ... Reserved future extensions. name Optional name resulting HRF.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_from_coefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine HRF Basis with Coefficients — hrf_from_coefficients","text":"new `HRF` object `nbasis = 1`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_from_coefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine HRF Basis with Coefficients — hrf_from_coefficients","text":"","code":"# Create a custom HRF from SPMG3 basis coefficients coeffs <- c(1, 0.2, -0.1)  # Main response + slight temporal shift - dispersion custom_hrf <- hrf_from_coefficients(HRF_SPMG3, coeffs)  # Evaluate the custom HRF t <- seq(0, 20, by = 0.1) response <- evaluate(custom_hrf, t)  # Create from FIR basis fir_coeffs <- c(0, 0.2, 0.5, 1, 0.8, 0.4, 0.1, 0, 0, 0, 0, 0) custom_fir <- hrf_from_coefficients(HRF_FIR, fir_coeffs)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma HRF (hemodynamic response function) — hrf_gamma","title":"Gamma HRF (hemodynamic response function) — hrf_gamma","text":"`hrf_gamma` function computes gamma density-based HRF (hemodynamic response function) given time points `t`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma HRF (hemodynamic response function) — hrf_gamma","text":"","code":"hrf_gamma(t, shape = 6, rate = 1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma HRF (hemodynamic response function) — hrf_gamma","text":"t vector time points. shape numeric value representing shape parameter gamma probability density function. Default value 6. rate numeric value representing rate parameter gamma probability density function. Default value 1.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma HRF (hemodynamic response function) — hrf_gamma","text":"numeric vector representing gamma HRF given time points `t`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gamma HRF (hemodynamic response function) — hrf_gamma","text":"","code":"# Compute the gamma HRF representation for time points from 0 to 20 with 0.5 increments hrf_gamma_vals <- hrf_gamma(seq(0, 20, by = .5), shape = 6, rate = 1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian HRF (hemodynamic response function) — hrf_gaussian","title":"Gaussian HRF (hemodynamic response function) — hrf_gaussian","text":"`hrf_gaussian` function computes Gaussian density-based HRF (hemodynamic response function) given time points `t`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian HRF (hemodynamic response function) — hrf_gaussian","text":"","code":"hrf_gaussian(t, mean = 6, sd = 2)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian HRF (hemodynamic response function) — hrf_gaussian","text":"t vector time points. mean numeric value representing mean Gaussian probability density function. Default value 6. sd numeric value representing standard deviation Gaussian probability density function. Default value 2.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian HRF (hemodynamic response function) — hrf_gaussian","text":"numeric vector representing Gaussian HRF given time points `t`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian HRF (hemodynamic response function) — hrf_gaussian","text":"","code":"# Compute the Gaussian HRF representation for time points from 0 to 20 with 0.5 increments hrf_gaussian_vals <- hrf_gaussian(seq(0, 20, by = .5), mean = 6, sd = 2)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_half_cosine.html","id":null,"dir":"Reference","previous_headings":"","what":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","title":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","text":"function models hemodynamic response function (HRF) using four half-period cosine basis functions. HRF consists initial dip, rise peak, fall undershoot, recovery baseline.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_half_cosine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","text":"","code":"hrf_half_cosine(t, h1 = 1, h2 = 5, h3 = 7, h4 = 7, f1 = 0, f2 = 0)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_half_cosine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","text":"t Time points evaluate HRF h1 Duration initial fall f1 0 (default: 1) h2 Duration rise 0 1 (default: 5) h3 Duration fall 1 0 (default: 7) h4 Duration final rise 0 f2 (default: 7) f1 Initial baseline level (default: 0) f2 Final baseline level (default: 0)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_half_cosine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","text":"vector HRF values corresponding input time values. Numeric vector HRF values time points t","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_half_cosine.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","text":"Woolrich, M. W., Behrens, T. E., & Smith, S. M. (2004). Constrained linear basis sets HRF modelling using Variational Bayes. NeuroImage, 21(4), 1748-1761. Half-cosine HRF Creates hemodynamic response function using half-cosine segments. function consists four phases controlled h1-h4 parameters, transitions baseline (f1) peak (1) final (f2) levels.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_half_cosine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hemodynamic Response Function with Half-Cosine Basis — hrf_half_cosine","text":"","code":"# Standard half-cosine HRF t <- seq(0, 30, by = 0.1) hrf <- hrf_half_cosine(t) plot(t, hrf, type = \"l\", main = \"Half-cosine HRF\")  # Modified shape with undershoot hrf_under <- hrf_half_cosine(t, h1 = 1, h2 = 4, h3 = 6, h4 = 8, f2 = -0.2) lines(t, hrf_under, col = \"red\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_inv_logit.html","id":null,"dir":"Reference","previous_headings":"","what":"hrf_inv_logit — hrf_inv_logit","title":"hrf_inv_logit — hrf_inv_logit","text":"hemodynamic response function using difference two Inverse Logit functions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_inv_logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hrf_inv_logit — hrf_inv_logit","text":"","code":"hrf_inv_logit(t, mu1 = 6, s1 = 1, mu2 = 16, s2 = 1, lag = 0)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_inv_logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hrf_inv_logit — hrf_inv_logit","text":"t vector times. mu1 time--peak rising phase (mean first logistic function). s1 width (slope) first logistic function. mu2 time--peak falling phase (mean second logistic function). s2 width (slope) second logistic function. lag time delay (default: 0).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_inv_logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hrf_inv_logit — hrf_inv_logit","text":"vector difference two Inverse Logit HRF values.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_inv_logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hrf_inv_logit — hrf_inv_logit","text":"","code":"hrf_inv_logit_basis <- hrf_inv_logit(seq(0, 20, by = 0.5), mu1 = 6, s1 = 1, mu2 = 16, s2 = 1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an HRF library from a parameter grid — hrf_library","title":"Generate an HRF library from a parameter grid — hrf_library","text":"`hrf_library` applies base HRF generating function row parameter grid.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an HRF library from a parameter grid — hrf_library","text":"","code":"hrf_library(fun, pgrid, ...)  gen_hrf_library(...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an HRF library from a parameter grid — hrf_library","text":"fun function generates HRF, given set parameters. pgrid data frame row set parameters. ... Additional arguments passed `fun`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_library.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an HRF library from a parameter grid — hrf_library","text":"combined HRF object representing library.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_library.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an HRF library from a parameter grid — hrf_library","text":"","code":"# Create library of gamma HRFs with varying parameters param_grid <- expand.grid(   shape = c(6, 8, 10),   rate = c(0.9, 1, 1.1) ) gamma_library <- hrf_library(   function(shape, rate) as_hrf(hrf_gamma, params = list(shape = shape, rate = rate)),   param_grid )  # Create library with fixed and varying parameters param_grid2 <- expand.grid(lag = c(0, 2, 4)) lagged_library <- hrf_library(   function(lag) gen_hrf(HRF_SPMG1, lag = lag),   param_grid2 )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_lwu.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag-Width-Undershoot (LWU) HRF — hrf_lwu","title":"Lag-Width-Undershoot (LWU) HRF — hrf_lwu","text":"Computes Lag-Width-Undershoot (LWU) hemodynamic response function. model uses two Gaussian components model main response optional undershoot. formula : \\deqnh(t; \\\\tau, \\\\sigma, \\\\rho) = e^-\\\\frac(t-\\\\tau)^22\\\\sigma^2 - \\\\rho e^-\\\\frac(t-\\\\tau-2\\\\sigma)^22(1.6\\\\sigma)^2h(t; tau, sigma, rho) = exp(-(t-tau)^2/(2*sigma^2)) - rho * exp(-(t-tau-2*sigma)^2/(2*(1.6*sigma)^2))","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_lwu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag-Width-Undershoot (LWU) HRF — hrf_lwu","text":"","code":"hrf_lwu(t, tau = 6, sigma = 2.5, rho = 0.35, normalize = \"none\")"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_lwu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag-Width-Undershoot (LWU) HRF — hrf_lwu","text":"t numeric vector time points (seconds). tau Lag main Gaussian component (time--peak positive lobe, seconds). Default: 6. sigma Width (standard deviation) main Gaussian component (seconds). Must > 0.05. Default: 2.5. rho Amplitude undershoot Gaussian component, relative main component. Must 0 1.5. Default: 0.35. normalize Character string specifying normalization type: \\describe   \\item\\code\"none\"normalization applied (default).   \\item\\code\"height\"HRF scaled maximum absolute value 1.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_lwu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag-Width-Undershoot (LWU) HRF — hrf_lwu","text":"numeric vector representing LWU HRF values given time points `t`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_lwu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lag-Width-Undershoot (LWU) HRF — hrf_lwu","text":"","code":"t_points <- seq(0, 30, by = 0.1)  # Default LWU HRF lwu_default <- hrf_lwu(t_points) plot(t_points, lwu_default, type = \"l\", main = \"LWU HRF (Default Params)\", ylab = \"Amplitude\")  # LWU HRF with no undershoot lwu_no_undershoot <- hrf_lwu(t_points, rho = 0) lines(t_points, lwu_no_undershoot, col = \"blue\")  # LWU HRF with a wider main peak and larger undershoot lwu_custom <- hrf_lwu(t_points, tau = 7, sigma = 1.5, rho = 0.5) lines(t_points, lwu_custom, col = \"red\") legend(\"topright\", c(\"Default\", \"No Undershoot (rho=0)\", \"Custom (tau=7, sigma=1.5, rho=0.5)\"),        col = c(\"black\", \"blue\", \"red\"), lty = 1, cex = 0.8)   # Height-normalized HRF lwu_normalized <- hrf_lwu(t_points, tau = 6, sigma = 1, rho = 0.35, normalize = \"height\") plot(t_points, lwu_normalized, type = \"l\", main = \"Height-Normalized LWU HRF\", ylab = \"Amplitude\") abline(h = c(-1, 1), lty = 2, col = \"grey\") # Max absolute value should be 1"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_mexhat.html","id":null,"dir":"Reference","previous_headings":"","what":"Mexican Hat HRF (hemodynamic response function) — hrf_mexhat","title":"Mexican Hat HRF (hemodynamic response function) — hrf_mexhat","text":"`hrf_mexhat` function computes Mexican hat wavelet-based HRF (hemodynamic response function) given time points `t`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_mexhat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mexican Hat HRF (hemodynamic response function) — hrf_mexhat","text":"","code":"hrf_mexhat(t, mean = 6, sd = 2)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_mexhat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mexican Hat HRF (hemodynamic response function) — hrf_mexhat","text":"t vector time points. mean numeric value representing mean Mexican hat wavelet. Default value 6. sd numeric value representing standard deviation Mexican hat wavelet. Default value 2.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_mexhat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mexican Hat HRF (hemodynamic response function) — hrf_mexhat","text":"numeric vector representing Mexican hat wavelet-based HRF given time points `t`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_mexhat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mexican Hat HRF (hemodynamic response function) — hrf_mexhat","text":"","code":"# Compute the Mexican hat HRF representation for time points from 0 to 20 with 0.5 increments hrf_mexhat_vals <- hrf_mexhat(seq(0, 20, by = .5), mean = 6, sd = 2)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an HRF Basis Set — hrf_set","title":"Generate an HRF Basis Set — hrf_set","text":"`hrf_set` constructs HRF basis set one component HRF objects.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an HRF Basis Set — hrf_set","text":"","code":"hrf_set(..., name = \"hrf_set\")  gen_hrf_set(...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an HRF Basis Set — hrf_set","text":"... One HRF objects. name name combined HRF set.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an HRF Basis Set — hrf_set","text":"combined HRF object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an HRF Basis Set — hrf_set","text":"","code":"# Combine multiple HRF types into a basis set hrf_basis <- hrf_set(HRF_SPMG1, HRF_GAUSSIAN, HRF_GAMMA)  # Create custom basis with different parameters hrf1 <- gen_hrf(hrf_gamma, alpha = 6, beta = 1) #> Warning: Could not determine nbasis for function hrf_gamma - defaulting to 1. Evaluation failed. hrf2 <- gen_hrf(hrf_gamma, alpha = 8, beta = 1) #> Warning: Could not determine nbasis for function hrf_gamma - defaulting to 1. Evaluation failed. custom_basis <- hrf_set(hrf1, hrf2, name = \"custom_gamma_basis\")  # Evaluate the basis set t <- seq(0, 30, by = 0.1) basis_response <- evaluate(hrf_basis, t)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_sine.html","id":null,"dir":"Reference","previous_headings":"","what":"hrf_sine — hrf_sine","title":"hrf_sine — hrf_sine","text":"hemodynamic response function using Sine Basis Set.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_sine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hrf_sine — hrf_sine","text":"","code":"hrf_sine(t, span = 24, N = 5)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_sine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hrf_sine — hrf_sine","text":"t vector times. span temporal window basis sets span (default: 24). N number basis functions (default: 5).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_sine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hrf_sine — hrf_sine","text":"matrix sine basis functions.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_sine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hrf_sine — hrf_sine","text":"","code":"hrf_sine_basis <- hrf_sine(seq(0, 20, by = 0.5), N = 4)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_spmg1.html","id":null,"dir":"Reference","previous_headings":"","what":"hrf_spmg1 — hrf_spmg1","title":"hrf_spmg1 — hrf_spmg1","text":"hemodynamic response function based SPM canonical double gamma parameterization.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_spmg1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hrf_spmg1 — hrf_spmg1","text":"","code":"hrf_spmg1(t, P1 = 5, P2 = 15, A1 = 0.0833)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_spmg1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hrf_spmg1 — hrf_spmg1","text":"t vector time points. P1 first exponent parameter (default: 5). P2 second exponent parameter (default: 15). A1 Amplitude scaling factor positive gamma function component; normally fixed .0833","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_spmg1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hrf_spmg1 — hrf_spmg1","text":"vector HRF values given time points.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_spmg1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"hrf_spmg1 — hrf_spmg1","text":"function models hemodynamic response using canonical double gamma parameterization SPM software. HRF defined linear combination two gamma functions different exponents (P1 P2) amplitudes (A1 A2). commonly used fMRI data analysis estimate BOLD (blood-oxygen-level-dependent) signal changes associated neural activity.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_spmg1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hrf_spmg1 — hrf_spmg1","text":"","code":"# Generate a time vector time_points <- seq(0, 30, by=0.1) # Compute the HRF values using the SPM canonical double gamma parameterization hrf_values <- hrf_spmg1(time_points) # Plot the HRF values plot(time_points, hrf_values, type='l', main='SPM Canonical Double Gamma HRF')"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_time.html","id":null,"dir":"Reference","previous_headings":"","what":"HRF (hemodynamic response function) as a linear function of time — hrf_time","title":"HRF (hemodynamic response function) as a linear function of time — hrf_time","text":"`hrf_time` function computes value HRF, simple linear function time `t`, `t` greater 0 less `maxt`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HRF (hemodynamic response function) as a linear function of time — hrf_time","text":"","code":"hrf_time(t, maxt = 22)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HRF (hemodynamic response function) as a linear function of time — hrf_time","text":"t numeric value representing time seconds. maxt numeric value representing maximum time point domain. Default value 22.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HRF (hemodynamic response function) as a linear function of time — hrf_time","text":"numeric value representing value HRF given time `t`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HRF (hemodynamic response function) as a linear function of time — hrf_time","text":"","code":"# Compute the HRF value for t = 5 seconds with the default maximum time hrf_val <- hrf_time(5)  # Compute the HRF value for t = 5 seconds with a custom maximum time of 30 seconds hrf_val_custom_maxt <- hrf_time(5, maxt = 30)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_toeplitz.html","id":null,"dir":"Reference","previous_headings":"","what":"HRF Toeplitz Matrix — hrf_toeplitz","title":"HRF Toeplitz Matrix — hrf_toeplitz","text":"Create Toeplitz matrix hemodynamic response function (HRF) convolution.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_toeplitz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HRF Toeplitz Matrix — hrf_toeplitz","text":"","code":"hrf_toeplitz(hrf, time, len, sparse = FALSE)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_toeplitz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HRF Toeplitz Matrix — hrf_toeplitz","text":"hrf hemodynamic response function. time numeric vector representing time points. len length output Toeplitz matrix. sparse Logical, TRUE, output Toeplitz matrix returned sparse matrix (default: FALSE).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_toeplitz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HRF Toeplitz Matrix — hrf_toeplitz","text":"Toeplitz matrix HRF convolution.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/hrf_toeplitz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HRF Toeplitz Matrix — hrf_toeplitz","text":"","code":"# Create HRF and time points hrf_fun <- function(t) hrf_spmg1(t) times <- seq(0, 30, by = 1)  # Create Toeplitz matrix H <- hrf_toeplitz(hrf_fun, times, len = 50)  # Create sparse version H_sparse <- hrf_toeplitz(hrf_fun, times, len = 50, sparse = TRUE)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/lag_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag an HRF Object — lag_hrf","title":"Lag an HRF Object — lag_hrf","text":"Creates new HRF object applying temporal lag existing HRF object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/lag_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag an HRF Object — lag_hrf","text":"","code":"lag_hrf(hrf, lag)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/lag_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag an HRF Object — lag_hrf","text":"hrf HRF object (class `HRF`) lag. lag time lag seconds apply. Positive values shift response later time.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/lag_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag an HRF Object — lag_hrf","text":"new HRF object representing lagged function.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/lag_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lag an HRF Object — lag_hrf","text":"","code":"lagged_spmg1 <- lag_hrf(HRF_SPMG1, 5) # Evaluate at time 10; equivalent to HRF_SPMG1(10 - 5) lagged_spmg1(10) #> [1] 1.753946 HRF_SPMG1(5) #> [1] 1.753946"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/list_available_hrfs.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available hemodynamic response functions (HRFs) — list_available_hrfs","title":"List all available hemodynamic response functions (HRFs) — list_available_hrfs","text":"Reads internal HRF registry list available HRF types.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/list_available_hrfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available hemodynamic response functions (HRFs) — list_available_hrfs","text":"","code":"list_available_hrfs(details = FALSE)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/list_available_hrfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available hemodynamic response functions (HRFs) — list_available_hrfs","text":"details Logical; TRUE, attempt add descriptions (basic now).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/list_available_hrfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available hemodynamic response functions (HRFs) — list_available_hrfs","text":"data frame columns: name, type (object/generator), nbasis_default.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/list_available_hrfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available hemodynamic response functions (HRFs) — list_available_hrfs","text":"","code":"# List all available HRFs hrfs <- list_available_hrfs() print(hrfs) #>        name      type nbasis_default is_alias #> 1     spmg1    object              1    FALSE #> 2     spmg2    object              2    FALSE #> 3     spmg3    object              3    FALSE #> 4     gamma    object              1    FALSE #> 5  gaussian    object              1    FALSE #> 6   bspline generator              5    FALSE #> 7      tent generator              5    FALSE #> 8   fourier generator              5    FALSE #> 9  daguerre generator              3    FALSE #> 10      fir generator             12    FALSE #> 11      lwu generator       variable    FALSE #> 12      gam    object              1    FALSE #> 13       bs generator              5     TRUE  # List with details hrfs_detailed <- list_available_hrfs(details = TRUE) print(hrfs_detailed) #>        name      type nbasis_default is_alias                description #> 1     spmg1    object              1    FALSE        spmg1 HRF (object)  #> 2     spmg2    object              2    FALSE        spmg2 HRF (object)  #> 3     spmg3    object              3    FALSE        spmg3 HRF (object)  #> 4     gamma    object              1    FALSE        gamma HRF (object)  #> 5  gaussian    object              1    FALSE     gaussian HRF (object)  #> 6   bspline generator              5    FALSE   bspline HRF (generator)  #> 7      tent generator              5    FALSE      tent HRF (generator)  #> 8   fourier generator              5    FALSE   fourier HRF (generator)  #> 9  daguerre generator              3    FALSE  daguerre HRF (generator)  #> 10      fir generator             12    FALSE       fir HRF (generator)  #> 11      lwu generator       variable    FALSE       lwu HRF (generator)  #> 12      gam    object              1    FALSE          gam HRF (object)  #> 13       bs generator              5     TRUE bs HRF (generator) (alias)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/make_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an HRF from a basis specification — make_hrf","title":"Create an HRF from a basis specification — make_hrf","text":"`make_hrf` resolves basis specification `HRF` object applies optional temporal lag. basis may given name built-HRF, generating function, existing `HRF` object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/make_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an HRF from a basis specification — make_hrf","text":"","code":"make_hrf(basis, lag, nbasis = 1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/make_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an HRF from a basis specification — make_hrf","text":"basis Character name built-HRF, function generates HRF values, object class `HRF`. lag Numeric scalar giving shift seconds applied HRF. nbasis Integer specifying number basis functions `basis` provided name.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/make_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an HRF from a basis specification — make_hrf","text":"object class `HRF` representing lagged basis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/make_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an HRF from a basis specification — make_hrf","text":"","code":"# Canonical SPM HRF delayed by 2 seconds h <- make_hrf(\"spmg1\", lag = 2) h(0:5) #> [1] 0.00000000 0.00000000 0.00000000 0.03064436 0.36074973 1.00778477"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/nbasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of basis functions — nbasis","title":"Number of basis functions — nbasis","text":"Return number basis functions represented object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/nbasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of basis functions — nbasis","text":"","code":"nbasis(x, ...)  # S3 method for class 'HRF' nbasis(x, ...)  # S3 method for class 'Reg' nbasis(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/nbasis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of basis functions — nbasis","text":"x Object containing HRF regressor information. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/nbasis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of basis functions — nbasis","text":"Integer scalar giving number basis functions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/nbasis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of basis functions — nbasis","text":"information typically used constructing penalty matrices understanding complexity HRF model regressor.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/nbasis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of basis functions — nbasis","text":"","code":"# Number of basis functions for different HRF types nbasis(HRF_SPMG1)   # 1 basis function #> [1] 1 nbasis(HRF_SPMG3)   # 3 basis functions (canonical + 2 derivatives) #> [1] 3 nbasis(HRF_BSPLINE) # 5 basis functions (default) #> [1] 5  # For a regressor reg <- regressor(onsets = c(10, 30, 50), hrf = HRF_SPMG3) nbasis(reg)  # 3 (inherits from the HRF) #> [1] 3"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/neural_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Neural Input Function from Event Timing — neural_input","title":"Generate Neural Input Function from Event Timing — neural_input","text":"Converts event timing information neural input function representing underlying neural activity HRF convolution. function useful :","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/neural_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Neural Input Function from Event Timing — neural_input","text":"","code":"neural_input(x, ...)  # S3 method for class 'Reg' neural_input(x, start = 0, end = NULL, resolution = 0.33, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/neural_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Neural Input Function from Event Timing — neural_input","text":"x regressor object containing event timing information ... Additional arguments passed methods start Numeric; start time input function end Numeric; end time input function resolution Numeric; temporal resolution seconds (default: 0.33)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/neural_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Neural Input Function from Event Timing — neural_input","text":"list containing: time Numeric vector time points neural_input Numeric vector input amplitudes time point","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/neural_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Neural Input Function from Event Timing — neural_input","text":"stimulus Creating stimulus functions fMRI analysis modeling Modeling sustained vs. transient neural activity inputs Generating inputs HRF convolution visualization Visualizing temporal structure experimental designs","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/neural_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Neural Input Function from Event Timing — neural_input","text":"","code":"# Create a regressor with multiple events reg <- regressor(   onsets = c(10, 30, 50),   duration = c(2, 2, 2),   amplitude = c(1, 1.5, 0.8),   hrf = HRF_SPMG1 )  # Generate neural input function input <- neural_input(reg, start = 0, end = 60, resolution = 0.5)  # Plot the neural input function plot(input$time, input$neural_input, type = \"l\",      xlab = \"Time (s)\", ylab = \"Neural Input\",      main = \"Neural Input Function\")   # Create regressor with varying durations reg_sustained <- regressor(   onsets = c(10, 30),   duration = c(5, 10),  # sustained activity   amplitude = c(1, 1),   hrf = HRF_SPMG1 )  # Generate and compare neural inputs input_sustained <- neural_input(   reg_sustained,   start = 0,   end = 60,   resolution = 0.5 )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/normalise_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise an HRF Object — normalise_hrf","title":"Normalise an HRF Object — normalise_hrf","text":"Creates new HRF object whose output scaled maximum absolute value response 1.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/normalise_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise an HRF Object — normalise_hrf","text":"","code":"normalise_hrf(hrf)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/normalise_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise an HRF Object — normalise_hrf","text":"hrf HRF object (class `HRF`) normalise.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/normalise_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise an HRF Object — normalise_hrf","text":"new HRF object representing normalised function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/normalise_hrf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise an HRF Object — normalise_hrf","text":"multi-basis HRFs, basis function (column) normalised independently.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/normalise_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise an HRF Object — normalise_hrf","text":"","code":"# Create a gaussian HRF with a peak value != 1 gauss_unnorm <- as_hrf(function(t) 5 * dnorm(t, 6, 2), name=\"unnorm_gauss\") # Normalise it gauss_norm <- normalise_hrf(gauss_unnorm) t_vals <- seq(0, 20, by = 0.1) max(gauss_unnorm(t_vals)) # Peak is > 1 #> [1] 0.9973557 max(gauss_norm(t_vals))   # Peak is 1 #> [1] 1"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get event onsets from an object — onsets","title":"Get event onsets from an object — onsets","text":"Generic accessor returning event onset times seconds.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get event onsets from an object — onsets","text":"","code":"onsets(x, ...)  # S3 method for class 'Reg' onsets(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get event onsets from an object — onsets","text":"x Object containing onset information ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get event onsets from an object — onsets","text":"Numeric vector onsets","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/penalty_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate penalty matrix for regularization — penalty_matrix","title":"Generate penalty matrix for regularization — penalty_matrix","text":"Generate penalty matrix regularizing HRF basis coefficients. penalty matrix encodes shape priors discourage implausible overly wiggly HRF estimates. Different HRF types use different penalty structures: FIR/B-spline/Tent bases: Roughness penalties based discrete derivatives SPM canonical + derivatives: Differential shrinkage derivative terms Fourier bases: Penalties high-frequency components Daguerre bases: Increasing weights higher-order terms Default: Identity matrix (ridge penalty)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/penalty_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate penalty matrix for regularization — penalty_matrix","text":"","code":"penalty_matrix(x, ...)  # S3 method for class 'HRF' penalty_matrix(x, order = 2, ...)  # S3 method for class 'BSpline_HRF' penalty_matrix(x, order = 2, ...)  # S3 method for class 'Tent_HRF' penalty_matrix(x, order = 2, ...)  # S3 method for class 'FIR_HRF' penalty_matrix(x, order = 2, ...)  # S3 method for class 'SPMG2_HRF' penalty_matrix(x, order = 2, shrink_deriv = 2, ...)  # S3 method for class 'SPMG3_HRF' penalty_matrix(x, order = 2, shrink_deriv = 2, ...)  # S3 method for class 'Fourier_HRF' penalty_matrix(x, order = 2, ...)  # S3 method for class 'Daguerre_HRF' penalty_matrix(x, order = 2, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/penalty_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate penalty matrix for regularization — penalty_matrix","text":"x HRF object basis specification ... Additional arguments passed specific methods order Integer specifying order penalty (default: 2) shrink_deriv Numeric; penalty weight derivative terms SPMG2/SPMG3 bases (default: 2)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/penalty_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate penalty matrix for regularization — penalty_matrix","text":"symmetric positive definite penalty matrix dimension nbasis(x) × nbasis(x)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/penalty_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate penalty matrix for regularization — penalty_matrix","text":"penalty matrix R used regularized estimation lambda * h^T R h, h basis coefficients lambda regularization parameter. Well-designed penalty matrices can significantly improve HRF estimation encoding smoothness shape constraints.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/penalty_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate penalty matrix for regularization — penalty_matrix","text":"","code":"# FIR basis with smoothness penalty fir_hrf <- HRF_FIR R_fir <- penalty_matrix(fir_hrf)  # B-spline basis with second-order smoothness bspline_hrf <- HRF_BSPLINE   R_bspline <- penalty_matrix(bspline_hrf, order = 2)  # SPM canonical with derivative shrinkage spmg3_hrf <- HRF_SPMG3 R_spmg3 <- penalty_matrix(spmg3_hrf, shrink_deriv = 4)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/plot.HRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an HRF Object — plot.HRF","title":"Plot an HRF Object — plot.HRF","text":"Plot HRF Object","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/plot.HRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an HRF Object — plot.HRF","text":"","code":"# S3 method for class 'HRF' plot(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/plot.HRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an HRF Object — plot.HRF","text":"x HRF object ... Additional arguments passed plotting functions","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for Reg objects — print.Reg","title":"Print method for Reg objects — print.Reg","text":"Provides concise summary regressor object using cli package.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for Reg objects — print.Reg","text":"","code":"# S3 method for class 'Reg' print(x, ...)  # S3 method for class 'sampling_frame' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for Reg objects — print.Reg","text":"x `Reg` object. ... used.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/reconstruction_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine HRF Basis with Coefficients — reconstruction_matrix","title":"Combine HRF Basis with Coefficients — reconstruction_matrix","text":"Create new HRF linearly weighting basis functions existing HRF. useful turning estimated basis coefficients single functional HRF.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/reconstruction_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine HRF Basis with Coefficients — reconstruction_matrix","text":"","code":"reconstruction_matrix(hrf, sframe, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/reconstruction_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine HRF Basis with Coefficients — reconstruction_matrix","text":"hrf object class `HRF`. sframe `sampling_frame` object numeric vector times. ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/reconstruction_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine HRF Basis with Coefficients — reconstruction_matrix","text":"numeric matrix one column per basis function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/reconstruction_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine HRF Basis with Coefficients — reconstruction_matrix","text":"Reconstruction matrix HRF basis Returns matrix \\(\\Phi\\) converts basis coefficients sampled HRF shape.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Regressor Object — regressor","title":"Construct a Regressor Object — regressor","text":"Creates object representing event-related regressors fMRI modeling. function defines event onsets associates hemodynamic response function (HRF) generate predicted time courses.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Regressor Object — regressor","text":"","code":"regressor(   onsets,   hrf = HRF_SPMG1,   duration = 0,   amplitude = 1,   span = 40,   summate = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Regressor Object — regressor","text":"onsets numeric vector event onset times seconds. hrf hemodynamic response function (HRF) convolve events. can pre-defined `HRF` object (e.g., `HRF_SPMG1`), custom `HRF` object created `as_hrf`, function `f(t)`, character string referring known HRF type (e.g., \"spmg1\", \"gaussian\"). Defaults `HRF_SPMG1`. duration numeric scalar vector specifying duration event seconds. scalar, applied events. Defaults 0 (impulse events). amplitude numeric scalar vector specifying amplitude (scaling factor) event. scalar, applied events. Defaults 1. span temporal window (seconds) HRF defined evaluated. influences length convolution. provided, may inferred `hrf` object default 40s. **Note:** Unlike previous versions, `span` automatically adjusted based `duration`; ensure provided inferred `span` sufficient longest event duration. summate Logical scalar; `TRUE` (default), HRF response amplitude scales duration sustained events (via internal convolution/summation). `FALSE`, response reflects peak HRF reached event duration.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Regressor Object — regressor","text":"S3 object class `Reg` `list`   containing processed event information HRF specification.   object includes `filtered_all` attribute indicating whether events   removed due zero `NA` amplitudes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Regressor Object — regressor","text":"function serves main public interface creating regressor objects. Internally, utilizes `Reg()` constructor performs validation efficient storage. resulting object can evaluated specific time points using `evaluate()` function. Events amplitude 0 automatically filtered .","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Regressor Object — regressor","text":"","code":"# Create a simple regressor with 3 events reg <- regressor(onsets = c(10, 30, 50), hrf = HRF_SPMG1)  # Regressor with durations and amplitudes reg2 <- regressor(   onsets = c(10, 30, 50),   duration = c(2, 2, 2),   amplitude = c(1, 1.5, 0.8),   hrf = HRF_SPMG1 )  # Using different HRF types reg_gamma <- regressor(onsets = c(10, 30), hrf = \"gamma\")  # Evaluate regressor at specific time points times <- seq(0, 60, by = 0.1) response <- evaluate(reg, times)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Design Matrix from Block-wise Onsets — regressor_design","title":"Build a Design Matrix from Block-wise Onsets — regressor_design","text":"`regressor_design` extends [regressor_set()] allowing onsets specified relative individual blocks directly returning evaluated design matrix.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Design Matrix from Block-wise Onsets — regressor_design","text":"","code":"regressor_design(   onsets,   fac,   block,   sframe,   hrf = HRF_SPMG1,   duration = 0,   amplitude = 1,   span = 40,   precision = 0.33,   method = c(\"conv\", \"fft\", \"Rconv\", \"loop\"),   sparse = FALSE,   summate = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Design Matrix from Block-wise Onsets — regressor_design","text":"onsets Numeric vector event onset times, expressed relative start corresponding block. fac factor (object coercible factor) indicating condition onset. block Integer vector identifying block onset. Values must valid block indices `sframe`. sframe [sampling_frame] describing temporal structure experiment. hrf Hemodynamic response function shared conditions. duration Numeric scalar vector event durations. amplitude Numeric scalar vector event amplitudes. span Numeric scalar giving HRF span seconds. precision Numeric precision used convolution. method Evaluation method passed [evaluate()]. sparse Logical; `TRUE` sparse design matrix returned. summate Logical; passed [regressor()].","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Design Matrix from Block-wise Onsets — regressor_design","text":"numeric matrix (sparse matrix) one column per factor level   one row per sample defined `sframe`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Design Matrix from Block-wise Onsets — regressor_design","text":"","code":"# Create a sampling frame for 2 blocks, 100 scans each, TR=2 sframe <- sampling_frame(blocklens = c(100, 100), TR = 2)  # Events in block-relative time onsets <- c(10, 30, 50, 20, 40, 60) conditions <- factor(c(\"A\", \"B\", \"A\", \"B\", \"A\", \"B\")) blocks <- c(1, 1, 1, 2, 2, 2)  # Build design matrix design <- regressor_design(   onsets = onsets,   fac = conditions,   block = blocks,   sframe = sframe,   hrf = HRF_SPMG1 )  # Design matrix has 200 rows (total scans) and 2 columns (conditions) dim(design) #> [1] 200   2"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Regressor Set — regressor_set","title":"Construct a Regressor Set — regressor_set","text":"Creates set regressors, one level factor. condition shares HRF parameters distinct onsets, durations amplitudes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Regressor Set — regressor_set","text":"","code":"regressor_set(   onsets,   fac,   hrf = HRF_SPMG1,   duration = 0,   amplitude = 1,   span = 40,   summate = TRUE )  # S3 method for class 'RegSet' evaluate(   x,   grid,   precision = 0.33,   method = c(\"conv\", \"fft\", \"Rconv\", \"loop\"),   sparse = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Regressor Set — regressor_set","text":"onsets Numeric vector event onset times. fac factor (object coercible factor) indicating condition onset. hrf Hemodynamic response function used conditions. duration Numeric scalar vector event durations. amplitude Numeric scalar vector event amplitudes. span Numeric scalar giving HRF span seconds. summate Logical; passed [regressor()]. x RegSet object grid Numeric vector time points evaluate precision Numeric precision evaluation method Evaluation method sparse Logical whether return sparse matrix ... Additional arguments passed evaluate","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Regressor Set — regressor_set","text":"object class `RegSet` containing one `Reg` per factor level.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/regressor_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Regressor Set — regressor_set","text":"","code":"# Create events for 3 conditions onsets <- c(10, 20, 30, 40, 50, 60) conditions <- factor(c(\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"))  # Create regressor set rset <- regressor_set(onsets, conditions, hrf = HRF_SPMG1)  # With durations and amplitudes rset2 <- regressor_set(   onsets = onsets,   fac = conditions,   duration = 2,   amplitude = c(1, 1.5, 0.8, 1, 1.5, 0.8),   hrf = HRF_SPMG1 )  # Evaluate the regressor set times <- seq(0, 80, by = 0.1) design_matrix <- evaluate(rset, times)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample acquisition times — samples","title":"Get sample acquisition times — samples","text":"Generic function retrieving sampling times sampling frame related object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample acquisition times — samples","text":"","code":"samples(x, ...)  # S3 method for class 'sampling_frame' samples(x, blockids = NULL, global = FALSE, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample acquisition times — samples","text":"x Object describing sampling grid ... Additional arguments passed methods blockids Integer vector block identifiers include (default: blocks) global Logical indicating whether return global times (default: FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sample acquisition times — samples","text":"Numeric vector sample times","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/sampling_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"A sampling_frame describes the block structure and temporal sampling of an fMRI paradigm. — sampling_frame","title":"A sampling_frame describes the block structure and temporal sampling of an fMRI paradigm. — sampling_frame","text":"sampling_frame describes block structure temporal sampling fMRI paradigm.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/sampling_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sampling_frame describes the block structure and temporal sampling of an fMRI paradigm. — sampling_frame","text":"","code":"sampling_frame(blocklens, TR, start_time = TR/2, precision = 0.1)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/sampling_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sampling_frame describes the block structure and temporal sampling of an fMRI paradigm. — sampling_frame","text":"blocklens numeric vector representing number scans block. TR numeric value vector representing repetition time seconds (.e., spacing consecutive image acquisitions). vector provided, length must 1 equal number blocks. start_time numeric value vector representing offset first scan block (default TR/2). vector provided, length must 1 equal number blocks. precision numeric value representing discrete sampling interval used convolution hemodynamic response function (default 0.1).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/sampling_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A sampling_frame describes the block structure and temporal sampling of an fMRI paradigm. — sampling_frame","text":"list class \"sampling_frame\" describing block structure temporal sampling fMRI paradigm.","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/sampling_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A sampling_frame describes the block structure and temporal sampling of an fMRI paradigm. — sampling_frame","text":"","code":"frame <- sampling_frame(blocklens = c(100, 100, 100), TR = 2, precision = 0.5)  # The relative time (with respect to the last block) in seconds of each sample/acquisition sam <- samples(frame) # The global time (with respect to the first block) of each sample/acquisition gsam <- samples(frame, global = TRUE)  # Block identifiers for each acquisition can be retrieved using # blockids(frame)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift a time series object — shift","title":"Shift a time series object — shift","text":"Apply temporal shift time series object. function shifts values time preserving structure object. Common uses include: alignment Aligning regressors different temporal offsets derivatives Applying temporal derivatives time series correction Correcting timing differences signals","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift a time series object — shift","text":"","code":"shift(x, ...)  # S3 method for class 'Reg' shift(x, shift_amount, ...)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift a time series object — shift","text":"x object representing time series time-based data structure ... Additional arguments passed methods shift_amount Numeric; amount shift (positive = forward, negative = backward)","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift a time series object — shift","text":"object class input, values shifted time: Values Values moved specified offset Structure Object structure dimensions preserved Padding Empty regions filled padding value","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift a time series object — shift","text":"","code":"# Create a simple time series with events event_data <- data.frame(   onsets = c(1, 10, 20, 30),   run = c(1, 1, 1, 1) )  # Create regressor from events reg <- regressor(   onsets = event_data$onsets,   hrf = HRF_SPMG1,   duration = 0,   amplitude = 1 )  # Shift regressor forward by 2 seconds reg_forward <- shift(reg, shift_amount = 2)  # Shift regressor backward by 1 second reg_backward <- shift(reg, shift_amount = -1)  # Evaluate original and shifted regressors times <- seq(0, 50, by = 2) orig_values <- evaluate(reg, times) shifted_values <- evaluate(reg_forward, times)"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/single_trial_regressor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a single trial regressor — single_trial_regressor","title":"Create a single trial regressor — single_trial_regressor","text":"Creates regressor object modeling single trial event fMRI experiment. particularly useful trial-wise analyses trial needs modeled separately. regressor represents predicted BOLD response single event using specified hemodynamic response function (HRF).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/single_trial_regressor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a single trial regressor — single_trial_regressor","text":"","code":"single_trial_regressor(   onsets,   hrf = HRF_SPMG1,   duration = 0,   amplitude = 1,   span = 24 )"},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/single_trial_regressor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a single trial regressor — single_trial_regressor","text":"onsets event onset seconds, must length 1. hrf hemodynamic response function, e.g. HRF_SPMG1 duration duration event (default 0), must length 1. amplitude scaling vector (default 1), must length 1. span temporal window impulse response function (default 24).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/single_trial_regressor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a single trial regressor — single_trial_regressor","text":"`Reg` object (inheriting `regressor` `list`).","code":""},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/single_trial_regressor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a single trial regressor — single_trial_regressor","text":"convenience wrapper around `regressor` ensures inputs length 1.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrihrf/reference/single_trial_regressor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a single trial regressor — single_trial_regressor","text":"","code":"# Create single trial regressor at 10 seconds str1 <- single_trial_regressor(onsets = 10, hrf = HRF_SPMG1)  # Single trial with duration and custom amplitude str2 <- single_trial_regressor(   onsets = 15,   duration = 3,   amplitude = 2,   hrf = HRF_SPMG1 )  # Evaluate the response times <- seq(0, 40, by = 0.1) response <- evaluate(str1, times)"}]
